{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Syda Documentation","text":"<p>A Python-based open-source library for generating synthetic data with AI while preserving referential integrity. Syda allows seamless use of OpenAI, Anthropic (Claude), and other AI models to create realistic synthetic data.</p>"},{"location":"#what-is-syda","title":"What is Syda?","text":"<p>Syda is a powerful library that helps developers and data scientists generate high-quality synthetic data using large language models. Whether you need to create test data for your application, training datasets for machine learning, or mock data that maintains complex relationships between tables, Syda provides an elegant solution.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li> <p>Multi-Provider AI Integration:</p> <ul> <li>Seamless integration with multiple AI providers</li> <li>Support for OpenAI (GPT) and Anthropic (Claude). </li> <li>Default model is Anthropic Claude model claude-3-5-haiku-20241022</li> <li>Consistent interface across different providers</li> <li>Provider-specific parameter optimization</li> </ul> </li> <li> <p>LLM-based Data Generation:</p> <ul> <li>AI-powered schema understanding and data creation</li> <li>Contextually-aware synthetic records</li> <li>Natural language prompt customization</li> <li>Intelligent schema inference</li> </ul> </li> <li> <p>Multiple Schema Formats:</p> <ul> <li>YAML/JSON schema file support with full foreign key relationship handling</li> <li>SQLAlchemy model integration with automatic metadata extraction</li> <li>Python dictionary-based schema definitions</li> </ul> </li> <li> <p>Referential Integrity</p> <ul> <li>Automatic foreign key detection and resolution</li> <li>Multi-model dependency analysis through topological sorting</li> <li>Robust handling of related data with referential constraints</li> </ul> </li> <li> <p>Custom Generators</p> <ul> <li>Register column- or type-specific functions for domain-specific data</li> <li>Contextual generators that adapt to other fields (like ICD-10 codes based on demographics)</li> </ul> </li> </ul>"},{"location":"quickstart/","title":"Quick Start","text":""},{"location":"quickstart/#installation","title":"Installation","text":"<p>Install the package using pip:</p> <pre><code>pip install syda\n</code></pre>"},{"location":"quickstart/#prepare-environment-variables","title":"Prepare environment variables","text":"<p>Before running the example, you need to prepare your environment variables with valid OpenAI or Anthropic (Claude) API keys. You can do this in one of two ways:</p> <ol> <li> <p>Create a <code>.env</code> file:</p> <p>Create a <code>.env</code> file in the root of this project with the following content:</p> <pre><code>OPENAI_API_KEY=your_openai_key\nANTHROPIC_API_KEY=your_anthropic_key\n</code></pre> </li> <li> <p>Set environment variables directly:</p> <p>You can also set the environment variables directly in your code:</p> <pre><code>export OPENAI_API_KEY=your_openai_key\nexport ANTHROPIC_API_KEY=your_anthropic_key\n</code></pre> </li> </ol>"},{"location":"quickstart/#example","title":"Example","text":"<pre><code>from syda.structured import SyntheticDataGenerator\nfrom syda.schemas import ModelConfig\nimport os\n\n# Create a model config instance with appropriate max_tokens setting\nmodel_config = ModelConfig(\n    provider=\"anthropic\",\n    model_name=\"claude-3-5-haiku-20241022\",\n    temperature=0.7,\n    max_tokens=8192,  # Using higher max_tokens value for more complete responses\n)\n\n# Create a syda generator instance and pass the model config\ngenerator = SyntheticDataGenerator(model_config=model_config)\n\n# Define output directory\noutput_dir = \"synthetic_output/ecommerce\"\n\n# Define schema dictionaries for an e-commerce system with descriptions\nschemas = {\n    # Customer schema with table and column descriptions\n    'Customer': {\n        # Define schema with additional metadata\n        '__table_description__': 'Registered users of the e-commerce platform who can place orders',\n        'id': {'type': 'number', 'description': 'Unique identifier for the customer'},\n        'name': {'type': 'text', 'description': 'Full name of the customer'},\n        'email': {'type': 'email', 'description': 'Customer email address used for communication'},\n        'signup_date': {'type': 'date', 'description': 'Date when the customer registered'},\n        'loyalty_tier': {'type': 'text', 'description': 'Customer loyalty program level (Bronze, Silver, Gold, Platinum)'}\n    },\n\n    # Product schema with table and column descriptions\n    'Product': {\n        '__table_description__': 'Products available for purchase in the e-commerce store',\n        'id': {'type': 'number', 'description': 'Unique identifier for the product'},\n        'name': {'type': 'text', 'description': 'Name of the product as displayed to customers'},\n        'category': {'type': 'text', 'description': 'Product category for classification and filtering'},\n        'price': {'type': 'number', 'description': 'Current price of the product in USD'},\n        'description': {'type': 'text', 'description': 'Detailed description of the product features and benefits'},\n        'in_stock': {'type': 'boolean', 'description': 'Whether the product is currently available for purchase'}\n    },\n\n    # Order schema with table and column descriptions\n    'Order': {\n        # Define schema with additional metadata\n        '__table_description__': 'Customer orders for products, including order status and total amount',\n        '__foreign_keys__': {\n            'customer_id': ['Customer', 'id']  # Order.customer_id references Customer.id\n        },\n\n        # Define columns\n        'id': {'type': 'number', 'description': 'Unique order identifier', 'primary_key': True},\n        'customer_id': {'type': 'foreign_key', 'description': 'Reference to the customer who placed the order'},\n        'order_date': {'type': 'date', 'description': 'Date when the order was placed'},\n        'status': {'type': 'text', 'description': 'Current status of the order (Pending, Processing, Shipped, Delivered, Cancelled)'},\n        'total_amount': {'type': 'number', 'description': 'Total amount of the order in USD'},\n        'shipping_address': {'type': 'text', 'description': 'Address where the order should be delivered'}\n    },\n\n    # OrderItem schema with table and column descriptions\n    'OrderItem': {\n        '__table_description__': 'Individual line items within an order, representing specific products',\n        '__foreign_keys__': {\n            'order_id': ['Order', 'id'],       # OrderItem.order_id references Order.id\n            'product_id': ['Product', 'id']    # OrderItem.product_id references Product.id\n        },\n\n        # Define columns\n        'id': {'type': 'number', 'description': 'Unique identifier for the order item'},\n        'order_id': {'type': 'foreign_key', 'description': 'Reference to the parent order'},\n        'product_id': {'type': 'foreign_key', 'description': 'Reference to the product being ordered'},\n        'quantity': {'type': 'number', 'description': 'Number of units of the product ordered'},\n        'unit_price': {'type': 'number', 'description': 'Price per unit at the time of order, may differ from current product price'}\n    }\n}\n\n# Define foreign key relationships\nforeign_keys = {\n    'Order': {\n        'customer_id': ('Customer', 'id')  # Order.customer_id references Customer.id\n    },\n    'OrderItem': {\n        'order_id': ('Order', 'id'),       # OrderItem.order_id references Order.id\n        'product_id': ('Product', 'id')    # OrderItem.product_id references Product.id\n    }\n}\n\n# Define custom prompts for each schema (optional)\nprompts = {\n    \"Customer\": \"\"\"\n    Generate diverse customers for an e-commerce platform.\n    Include various loyalty tiers (Bronze, Silver, Gold, Platinum)\n    and realistic signup dates within the last 3 years.\n    \"\"\",\n\n    \"Product\": \"\"\"\n    Generate diverse products for an e-commerce store.\n    Include various categories (Electronics, Clothing, Home, Books, etc.)\n    with realistic prices and descriptions.\n    \"\"\",\n\n    \"Order\": \"\"\"\n    Generate realistic orders with appropriate dates and statuses\n    (Pending, Processing, Shipped, Delivered, Cancelled).\n    Total amounts should reflect typical e-commerce purchases.\n    \"\"\"\n}\n\n# Define sample sizes for each schema (optional)\nsample_sizes = {\n    \"Customer\": 10,       # Base entities\n    \"Product\": 15,        # Product catalog\n    \"Order\": 25,          # ~2-3 orders per customer\n    \"OrderItem\": 50,      # ~2 items per order\n}\n\nprint(\"\\n\ud83d\udd04 Generating related data for E-commerce system...\")\nprint(\"  The system will automatically determine the right generation order\")\nprint(\"  and set up foreign key relationships\\n\")\n\n# Generate data using the unified generate_for_schemas method\nresults = generator.generate_for_schemas(\n    schemas=schemas,\n    prompts=prompts,\n    sample_sizes=sample_sizes,\n    output_dir=output_dir\n)\n</code></pre>"},{"location":"schema_reference/","title":"Schema reference","text":""},{"location":"schema_reference/#structured-data-example","title":"Structured Data Example","text":"<pre><code>__table_name__: Order\n__table_description__: Orders for an e-commerce system\n__depends_on__: [Customer, Product]\n__foreign_keys__:\n  customer_id: [Customer, id]\n\nid:\n  type: integer\n  description: Order ID\n  constraints:\n    primary_key: true\n    not_null: true\n\ncustomer_id:\n  type: integer\n  description: Customer reference\n  constraints:\n    not_null: true\n\norder_date:\n  type: date\n  constraints:\n    format: YYYY-MM-DD\n    not_null: true\n\ntotal_amount:\n  type: float\n  description: Total order amount\n  constraints:\n    min: 0\n    decimals: 2\n\nstatus:\n  type: text\n  description: Order processing status\n  constraints:\n    enum: [\"pending\", \"processing\", \"shipped\", \"delivered\", \"cancelled\"]\n\nitems:\n  type: array\n  description: Line items in the order\n</code></pre>"},{"location":"schema_reference/#template-schema-example","title":"Template Schema Example","text":"<pre><code>__template__: true\n__table_description__: Invoice document template\n__name__: Invoice\n__depends_on__: [Customer, Order, OrderItem]\n__foreign_keys__:\n  customer_id: [Customer, id]\n  order_id: [Order, id]\n\n__template_source__: /path/to/invoice_template.html\n__input_file_type__: html\n__output_file_type__: pdf\n\ninvoice_number:\n  type: string\n  pattern: 'INV-\\d{6}'\n  description: Unique invoice identifier\n\ncustomer_id:\n  type: integer\n  description: Reference to customer\n\norder_id:\n  type: integer\n  description: Reference to order\n\nissue_date:\n  type: date\n  format: YYYY-MM-DD\n  description: Date when invoice was issued\n\ndue_date:\n  type: date\n  format: YYYY-MM-DD\n  description: Payment due date\n\nitems:\n  type: array\n  description: Line items from the order\n</code></pre>"},{"location":"examples/model_selection/anthropic/","title":"Using Anthropic Models with SYDA","text":"<p>This example demonstrates how to use Anthropic's Claude models with SYDA for synthetic data generation. Anthropic offers several Claude models with different capabilities, token limits, and price points.</p>"},{"location":"examples/model_selection/anthropic/#prerequisites","title":"Prerequisites","text":"<p>Before running this example, you need to:</p> <ol> <li>Install SYDA and its dependencies</li> <li>Set up your Anthropic API key in your environment</li> </ol> <p>You can set the API key in your <code>.env</code> file:</p> <pre><code>ANTHROPIC_API_KEY=your_api_key_here\n</code></pre> <p>Or set it as an environment variable before running your script:</p> <pre><code>export ANTHROPIC_API_KEY=your_api_key_here\n</code></pre>"},{"location":"examples/model_selection/anthropic/#example-code","title":"Example Code","text":"<p>The following example demonstrates how to configure and use different Claude models for synthetic data generation:</p> <pre><code>from syda.generate import SyntheticDataGenerator\nfrom syda.schemas import ModelConfig\nimport os\nfrom dotenv import load_dotenv\n\n# Load environment variables\nload_dotenv()\n\n# Define schema for a single table\nschemas = {\n    'Patient': {\n        'patient_id': {'type': 'number', 'description': 'Unique identifier for the patient'},\n        'diagnosis_code': {'type': 'text', 'description': 'ICD-10 diagnosis code'},\n        'email': {'type': 'email', 'description': 'Patient email address used for communication'},\n        'visit_date': {'type': 'date', 'description': 'Date when the patient visited the clinic'},\n        'notes': {'type': 'text', 'description': 'Clinical notes for the patient visit'}\n    },\n    'Claim': {\n        'claim_id': {'type': 'number', 'description': 'Unique identifier for the claim'},\n        'patient_id': {'type': 'foreign_key', 'description': 'Reference to the patient who made the claim', 'references': {'schema': 'Patient', 'field': 'patient_id'}},\n        'diagnosis_code': {'type': 'text', 'description': 'ICD-10 diagnosis code'},\n        'email':    {'type': 'email', 'description': 'Patient email address used for communication'},\n        'visit_date': {'type': 'date', 'description': 'Date when the patient visited the clinic'},\n        'notes': {'type': 'text', 'description': 'Clinical notes for the patient visit'}\n    }\n}\n\nprompts={\n    'Patient': 'Generate realistic synthetic patient records with ICD-10 diagnosis codes, emails, visit dates, and clinical notes.', \n    'Claim': 'Generate realistic synthetic claim records with ICD-10 diagnosis codes, emails, visit dates, and clinical notes.'\n}\nsample_sizes={'Patient': 15, 'Claim': 15}\n\nprint(\"--------------Testing Claude Haiku----------------\")\nmodel_config = ModelConfig(\n    provider=\"anthropic\",\n    model_name=\"claude-3-5-haiku-20241022\",\n    temperature=0.7,\n    max_tokens=8192  # Larger value for more complete responses\n)\n\ngenerator = SyntheticDataGenerator(model_config=model_config)\n # Define output directory\noutput_dir = os.path.join(\n        os.path.dirname(os.path.abspath(__file__)), \n        \"output\", \n        \"test_claude_models\", \n        \"haiku-3-5\"\n)\n# Generate and save to CSV\nresults = generator.generate_for_schemas(\n    schemas=schemas,\n    prompts=prompts,\n    sample_sizes=sample_sizes,\n    output_dir=output_dir\n)\nprint(f\"Data saved to {output_dir}\")\n\n\nprint(\"--------------Testing Claude Sonnet----------------\")\nmodel_config = ModelConfig(\n    provider=\"anthropic\",\n    model_name=\"claude-sonnet-4-20250514\",\n    temperature=0.7,\n    max_tokens=64000  # Larger value for more complete responses\n)\n\ngenerator = SyntheticDataGenerator(model_config=model_config)\n # Define output directory\noutput_dir = os.path.join(\n        os.path.dirname(os.path.abspath(__file__)), \n        \"output\", \n        \"test_claude_models\", \n        \"sonnet-4\"\n)\nsample_sizes={'Patient': 100, 'Claim': 200}\n# Generate and save to CSV\nresults = generator.generate_for_schemas(\n    schemas=schemas,\n    prompts=prompts,\n    sample_sizes=sample_sizes,\n    output_dir=output_dir\n)\nprint(f\"Data saved to {output_dir}\")\n\nprint(\"--------------Testing Claude Opus----------------\")\nmodel_config = ModelConfig(\n    provider=\"anthropic\",\n    model_name=\"claude-opus-4-20250514\",\n    temperature=0.7,\n    max_tokens=32000  # Larger value for more complete responses\n)\n\ngenerator = SyntheticDataGenerator(model_config=model_config)\n# Define output directory\noutput_dir = os.path.join(\n        os.path.dirname(os.path.abspath(__file__)), \n        \"output\", \n        \"test_claude_models\", \n        \"opus-4\"\n)\n# Generate and save to CSV\nresults = generator.generate_for_schemas(\n    schemas=schemas,\n    prompts=prompts,\n    sample_sizes=sample_sizes,\n    output_dir=output_dir\n)\nprint(f\"Data saved to {output_dir}\")\n</code></pre>"},{"location":"examples/model_selection/anthropic/#claude-model-options","title":"Claude Model Options","text":"<p>SYDA supports the following Anthropic Claude models:</p> Model Description Best For Max Tokens <code>claude-3-5-haiku-20241022</code> Fast, efficient model for routine tasks Quick data generation, smaller datasets 8,192 <code>claude-sonnet-4-20250514</code> Strong balance of quality and performance Medium to large datasets with complex relations 64,000 <code>claude-opus-4-20250514</code> Highest capability model Complex data with sophisticated relationships 32,000"},{"location":"examples/model_selection/anthropic/#key-concepts","title":"Key Concepts","text":""},{"location":"examples/model_selection/anthropic/#model-configuration","title":"Model Configuration","text":"<p>The <code>ModelConfig</code> class is used to specify which model to use:</p> <pre><code>model_config = ModelConfig(\n    provider=\"anthropic\",\n    model_name=\"claude-3-5-haiku-20241022\",\n    temperature=0.7,\n    max_tokens=8192\n)\n</code></pre> <ul> <li>provider: Set to <code>\"anthropic\"</code> to use Claude models</li> <li>model_name: Specify which Claude model to use</li> <li>temperature: Controls randomness in generation (0.0-1.0)</li> <li>max_tokens: Maximum number of tokens in the response</li> </ul>"},{"location":"examples/model_selection/anthropic/#scaling-to-larger-datasets","title":"Scaling to Larger Datasets","text":"<p>When generating larger datasets, consider using more capable models:</p> <pre><code>sample_sizes = {'Patient': 100, 'Claim': 200}\n</code></pre> <p>The more powerful Claude models (Sonnet and Opus) can handle generating larger datasets in a single request, which is more efficient than making multiple smaller requests.</p>"},{"location":"examples/model_selection/anthropic/#output-directory-structure","title":"Output Directory Structure","text":"<p>The example code creates an organized directory structure for output files:</p> <pre><code>output/\n\u251c\u2500\u2500 test_claude_models/\n\u2502   \u251c\u2500\u2500 haiku-3-5/\n\u2502   \u2502   \u251c\u2500\u2500 Patient.csv\n\u2502   \u2502   \u2514\u2500\u2500 Claim.csv\n\u2502   \u251c\u2500\u2500 sonnet-4/\n\u2502   \u2502   \u251c\u2500\u2500 Patient.csv\n\u2502   \u2502   \u2514\u2500\u2500 Claim.csv\n\u2502   \u2514\u2500\u2500 opus-4/\n\u2502       \u251c\u2500\u2500 Patient.csv\n\u2502       \u2514\u2500\u2500 Claim.csv\n</code></pre>"},{"location":"examples/model_selection/anthropic/#best-practices","title":"Best Practices","text":"<ol> <li>Choose the right model for your task: </li> <li>Use Haiku for small datasets and simple schemas</li> <li>Use Sonnet for medium-sized datasets with moderate complexity</li> <li> <p>Use Opus for complex data structures and relationships</p> </li> <li> <p>Set appropriate token limits: Different models have different token limits. Make sure to set the <code>max_tokens</code> parameter accordingly.</p> </li> <li> <p>Use detailed prompts: Claude models respond well to specific guidance in prompts. Include details about the type of data you want to generate.</p> </li> <li> <p>Monitor API usage: Keep track of your API usage to manage costs, especially when working with larger datasets.</p> </li> </ol>"},{"location":"examples/model_selection/openai/","title":"Using OpenAI Models with SYDA","text":"<p>This example demonstrates how to use OpenAI's models with SYDA for synthetic data generation. OpenAI offers several models with different capabilities, token limits, and price points.</p>"},{"location":"examples/model_selection/openai/#prerequisites","title":"Prerequisites","text":"<p>Before running this example, you need to:</p> <ol> <li>Install SYDA and its dependencies</li> <li>Set up your OpenAI API key in your environment</li> </ol> <p>You can set the API key in your <code>.env</code> file:</p> <pre><code>OPENAI_API_KEY=your_api_key_here\n</code></pre> <p>Or set it as an environment variable before running your script:</p> <pre><code>export OPENAI_API_KEY=your_api_key_here\n</code></pre>"},{"location":"examples/model_selection/openai/#example-code","title":"Example Code","text":"<p>The following example demonstrates how to configure and use different OpenAI models for synthetic data generation:</p> <pre><code>from syda.generate import SyntheticDataGenerator\nfrom syda.schemas import ModelConfig\nimport os\nfrom dotenv import load_dotenv\n\n# Load environment variables\nload_dotenv()\n\n# Define schema for a single table\nschemas = {\n    'Patient': {\n        'patient_id': {'type': 'number', 'description': 'Unique identifier for the patient'},\n        'diagnosis_code': {'type': 'text', 'description': 'ICD-10 diagnosis code'},\n        'email': {'type': 'email', 'description': 'Patient email address used for communication'},\n        'visit_date': {'type': 'date', 'description': 'Date when the patient visited the clinic'},\n        'notes': {'type': 'text', 'description': 'Clinical notes for the patient visit'}\n    },\n    'Claim': {\n        'claim_id': {'type': 'number', 'description': 'Unique identifier for the claim'},\n        'patient_id': {'type': 'foreign_key', 'description': 'Reference to the patient who made the claim', 'references': {'schema': 'Patient', 'field': 'patient_id'}},\n        'diagnosis_code': {'type': 'text', 'description': 'ICD-10 diagnosis code'},\n        'email':    {'type': 'email', 'description': 'Patient email address used for communication'},\n        'visit_date': {'type': 'date', 'description': 'Date when the patient visited the clinic'},\n        'notes': {'type': 'text', 'description': 'Clinical notes for the patient visit'}\n    }\n}\n\nprompts={\n    'Patient': 'Generate realistic synthetic patient records with ICD-10 diagnosis codes, emails, visit dates, and clinical notes.', \n    'Claim': 'Generate realistic synthetic claim records with ICD-10 diagnosis codes, emails, visit dates, and clinical notes.'\n}\n\n\nprint(\"--------------Testing OpenAI GPT-4o----------------\")\nsample_sizes={'Patient': 15, 'Claim': 15}\nmodel_config = ModelConfig(\n    provider=\"openai\",\n    model_name=\"gpt-4o-2024-08-06\",\n    temperature=0.7,\n    max_completion_tokens=16000  # Larger value for more complete responses\n)\n\ngenerator = SyntheticDataGenerator(model_config=model_config)\n # Define output directory\noutput_dir = os.path.join(\n        os.path.dirname(os.path.abspath(__file__)), \n        \"output\", \n        \"test_openai_models\", \n        \"gpt-4o\"\n)\n# Generate and save to CSV\nresults = generator.generate_for_schemas(\n    schemas=schemas,\n    prompts=prompts,\n    sample_sizes=sample_sizes,\n    output_dir=output_dir\n)\nprint(f\"Data saved to {output_dir}\")\n\n\nprint(\"--------------Testing OpenAI o3----------------\")\nmodel_config = ModelConfig(\n    provider=\"openai\",\n    model_name=\"o3-2025-04-16\",\n    max_completion_tokens=100000  # Larger value for more complete responses\n)\n\ngenerator = SyntheticDataGenerator(model_config=model_config)\n # Define output directory\noutput_dir = os.path.join(\n        os.path.dirname(os.path.abspath(__file__)), \n        \"output\", \n        \"test_openai_models\", \n        \"o3\"\n)\nsample_sizes={'Patient': 100, 'Claim': 200}\n# Generate and save to CSV\nresults = generator.generate_for_schemas(\n    schemas=schemas,\n    prompts=prompts,\n    sample_sizes=sample_sizes,\n    output_dir=output_dir\n)\nprint(f\"Data saved to {output_dir}\")\n</code></pre>"},{"location":"examples/model_selection/openai/#openai-model-options","title":"OpenAI Model Options","text":"<p>SYDA supports the following OpenAI models:</p> Model Description Best For Max Tokens <code>gpt-4o-2024-08-06</code> Versatile model with strong reasoning General purpose data generation 16,000 <code>o3-2025-04-16</code> Highest capability model Complex data with sophisticated relationships 100,000 <code>gpt-4-turbo</code> Balanced model for most use cases Medium-sized datasets 16,000"},{"location":"examples/model_selection/openai/#key-concepts","title":"Key Concepts","text":""},{"location":"examples/model_selection/openai/#foreign-key-handling","title":"Foreign Key Handling","text":"<p>Foreign keys are crucial for maintaining referential integrity in generated data. In the example above, we're using the <code>foreign_key</code> type with explicit references:</p> <pre><code>'patient_id': {\n    'type': 'foreign_key',\n    'description': 'Reference to the patient who made the claim',\n    'references': {\n        'schema': 'Patient', \n        'field': 'patient_id'\n    }\n}\n</code></pre> <p>SYDA supports three methods for defining foreign keys: 1. Using the <code>__foreign_keys__</code> special section 2. Using field-level references with type and references properties (shown above) 3. Using type-based detection with naming conventions (field name ends with <code>_id</code>)</p>"},{"location":"examples/model_selection/openai/#model-configuration","title":"Model Configuration","text":"<p>The <code>ModelConfig</code> class is used to specify which model to use:</p> <pre><code>model_config = ModelConfig(\n    provider=\"openai\",\n    model_name=\"gpt-4o-2024-08-06\",\n    temperature=0.7,\n    max_completion_tokens=16000\n)\n</code></pre> <ul> <li>provider: Set to <code>\"openai\"</code> to use OpenAI models</li> <li>model_name: Specify which OpenAI model to use</li> <li>temperature: Controls randomness in generation (0.0-1.0)</li> <li>max_completion_tokens: Maximum number of tokens in the response</li> </ul>"},{"location":"examples/model_selection/openai/#scaling-to-larger-datasets","title":"Scaling to Larger Datasets","text":"<p>When generating larger datasets, consider using models with higher token limits:</p> <pre><code>sample_sizes = {'Patient': 100, 'Claim': 200}\n</code></pre> <p>The o3 model can handle generating larger datasets in a single request, which is more efficient than making multiple smaller requests.</p>"},{"location":"examples/model_selection/openai/#output-directory-structure","title":"Output Directory Structure","text":"<p>The example code creates an organized directory structure for output files:</p> <pre><code>output/\n\u251c\u2500\u2500 test_openai_models/\n\u2502   \u251c\u2500\u2500 gpt-4o/\n\u2502   \u2502   \u251c\u2500\u2500 Patient.csv\n\u2502   \u2502   \u2514\u2500\u2500 Claim.csv\n\u2502   \u2514\u2500\u2500 o3/\n\u2502       \u251c\u2500\u2500 Patient.csv\n\u2502       \u2514\u2500\u2500 Claim.csv\n</code></pre>"},{"location":"examples/model_selection/openai/#best-practices","title":"Best Practices","text":"<ol> <li>Choose the right model for your task: </li> <li>Use gpt-4o for balanced performance and quality</li> <li> <p>Use o3 for complex data structures and larger datasets</p> </li> <li> <p>Set appropriate token limits: Different models have different token limits. Make sure to set the <code>max_completion_tokens</code> parameter accordingly.</p> </li> <li> <p>Use detailed prompts: Include specific instructions in your prompts to get better quality synthetic data.</p> </li> <li> <p>Monitor API usage: Keep track of your API usage to manage costs, especially when working with larger datasets.</p> </li> <li> <p>Handle relationships carefully: When defining schemas with foreign keys, ensure you specify the relationships correctly for proper data generation.</p> </li> </ol>"},{"location":"examples/structured_only/hr_employee_example/","title":"HR/Employee Data Generation Example","text":"<p>This example demonstrates how to use SYDA to generate synthetic HR/employee data with interlinked tables and custom generators.</p>"},{"location":"examples/structured_only/hr_employee_example/#overview","title":"Overview","text":"<p>The HR example includes:</p> <ol> <li>Departments - Company departments with budget and location information</li> <li>Positions - Job positions with salary ranges and levels</li> <li>Employees - Staff members linked to departments and positions</li> <li>Performance Reviews - Regular employee evaluations with scores and feedback</li> </ol> <p>This example showcases: - Foreign key relationships across tables - Custom generators for realistic data - Generation dependencies to maintain data integrity - Realistic business rules (managers from same department, salary ranges based on position)</p>"},{"location":"examples/structured_only/hr_employee_example/#schema-structure","title":"Schema Structure","text":"<p>The example defines four YAML schemas:</p> <ul> <li><code>department.yml</code> - Department information with budget and location</li> <li><code>position.yml</code> - Job positions with titles, levels, and salary ranges</li> <li><code>employee.yml</code> - Employee records with links to departments and positions</li> <li><code>performance_review.yml</code> - Employee reviews with scores and feedback</li> </ul>"},{"location":"examples/structured_only/hr_employee_example/#custom-generators","title":"Custom Generators","text":"<p>The example implements several custom generators:</p> <ol> <li>Email Generator - Creates realistic emails based on employee names</li> <li>Manager ID Generator - Ensures managers belong to departments they manage</li> <li>Salary Generator - Sets salary within range defined by position</li> <li>Review Date Generator - Generates review dates after employee hire dates</li> <li>Review Period Generator - Creates sensible review periods</li> </ol>"},{"location":"examples/structured_only/hr_employee_example/#running-the-example","title":"Running the Example","text":"<p>To run this example:</p> <pre><code>cd /path/to/syda-fresh\npython examples/structured_only/hr_employee_example/test_hr_schemas.py\n</code></pre> <p>The script will: - Generate 8 departments, 15 positions, 50 employees, and 75 performance reviews - Apply custom generators to create realistic values - Maintain referential integrity across tables - Save all data to CSV files in the <code>output</code> directory</p>"},{"location":"examples/structured_only/hr_employee_example/#output","title":"Output","text":"<p>The generated data is saved to the <code>output</code> directory as CSV files: - <code>department.csv</code> - <code>position.csv</code> - <code>employee.csv</code> - <code>performance_review.csv</code></p> <p>You can import these files into a database or analyze them to see the relationships between tables.</p>"},{"location":"examples/unstructured_only/healthcare_yml/","title":"Healthcare Unstructured Data Example","text":"<p>This example demonstrates how to use SYDA for generating unstructured healthcare data using YAML schemas with PDF output.</p>"},{"location":"examples/unstructured_only/healthcare_yml/#overview","title":"Overview","text":"<p>This example shows how to:</p> <ol> <li>Define healthcare data schemas with template metadata using YAML format</li> <li>Reference HTML templates for document formatting</li> <li>Generate synthetic healthcare documents in PDF format using the <code>generate_for_schemas</code> method</li> <li>Process schema definitions with proper template integration</li> </ol>"},{"location":"examples/unstructured_only/healthcare_yml/#directory-structure","title":"Directory Structure","text":"<ul> <li><code>schemas/</code>: Contains YAML schema definitions with template metadata</li> <li><code>medical_report.yml</code>: Schema for medical reports with template settings</li> <li><code>lab_result.yml</code>: Schema for lab results with template settings</li> <li><code>templates/</code>: HTML templates for medical reports and lab results</li> <li><code>medical_report_template.html</code>: Template for medical visit reports</li> <li><code>lab_result_template.html</code>: Template for laboratory test results</li> <li><code>output/</code>: Generated healthcare data files (PDF format and JSON data)</li> <li><code>generate_healthcare_data.py</code>: Main script to generate healthcare data using schemas</li> </ul>"},{"location":"examples/unstructured_only/healthcare_yml/#running-the-example","title":"Running the Example","text":"<p>Execute the example script:</p> <pre><code>python3 examples/unstructured_only/healthcare_yml/generate_healthcare_data.py\n</code></pre> <p>This will: - Initialize the <code>SyntheticDataGenerator</code> with model configuration - Load the YAML schema files with template references - Generate 5 synthetic medical reports and 5 lab results as PDF files - Save the synthetic data in both PDF format and structured JSON data</p>"},{"location":"examples/unstructured_only/healthcare_yml/#schema-definitions","title":"Schema Definitions","text":"<p>The example uses YAML files that define both the schema and template metadata:</p> <ol> <li>Medical Report (<code>medical_report.yml</code>): Contains:</li> <li>Template metadata (<code>__template__</code>, <code>__name__</code>, etc.)</li> <li>Input/output format configuration (HTML to PDF)</li> <li> <p>Data fields for patient information, vital signs, diagnosis, etc.</p> </li> <li> <p>Lab Result (<code>lab_result.yml</code>): Contains:</p> </li> <li>Template metadata and format configuration</li> <li>Fields for laboratory test information, results, and reference ranges</li> </ol>"},{"location":"examples/unstructured_only/healthcare_yml/#templates","title":"Templates","text":"<p>HTML templates in the <code>templates/</code> directory define how medical reports and lab results are formatted. The schema files reference these templates and specify conversion to PDF format using the following special attributes:</p> <pre><code>__template__: true\n__template_source: path/to/template.html\n__input_file_type__: html\n__output_file_type__: pdf\n</code></pre>"},{"location":"examples/unstructured_only/healthcare_yml/#using-the-results","title":"Using the Results","text":"<p>After generation, the example produces:</p> <ul> <li>PDF documents that can be viewed in any PDF reader</li> <li>Structured JSON data representing the synthetic healthcare records</li> </ul> <p>These can be used for: - Training machine learning models - Testing document processing pipelines - Demonstrating healthcare data workflows - Prototyping healthcare applications</p>"},{"location":"schema_reference/field_types/","title":"SYDA Schema Reference","text":"<p>This document defines the schema format for the SYDA (Synthetic Data) library. It describes the supported field types and constraints.</p>"},{"location":"schema_reference/field_types/#basic-schema-structure","title":"Basic Schema Structure","text":"<p>A schema in SYDA is defined as a JSON or YAML object with field names as keys and field types as values. The simplest form is:</p> <pre><code>field1:\n  type: string\nfield2:\n  type: number\nfield3:\n  type: date\n</code></pre>"},{"location":"schema_reference/field_types/#field-types","title":"Field Types","text":"<p>The following field types are supported:</p>"},{"location":"schema_reference/field_types/#text","title":"text","text":"<p>Generic text field for storing names, descriptions, and other textual content.</p> <p>Example: <pre><code>name:\n  type: text\n</code></pre></p>"},{"location":"schema_reference/field_types/#string","title":"string","text":"<p>Same as text, used for storing character data.</p> <p>Example: <pre><code>title:\n  type: string\n</code></pre></p>"},{"location":"schema_reference/field_types/#number","title":"number","text":"<p>Numeric field that can represent integers or decimal values.</p> <p>Example: <pre><code>id:\n  type: number\n</code></pre></p>"},{"location":"schema_reference/field_types/#integer","title":"integer","text":"<p>Integer value with no decimal places. Can also use the alias <code>int</code>.</p> <p>Example: <pre><code>age:\n  type: integer\n</code></pre></p>"},{"location":"schema_reference/field_types/#float","title":"float","text":"<p>Floating-point number that can have decimal places.</p> <p>Example: <pre><code>price:\n  type: float\n</code></pre></p>"},{"location":"schema_reference/field_types/#date","title":"date","text":"<p>Date value in standard format.</p> <p>Example: <pre><code>birth_date:\n  type: date\n</code></pre></p>"},{"location":"schema_reference/field_types/#datetime","title":"datetime","text":"<p>Date and time value.</p> <p>Example: <pre><code>created_at:\n  type: datetime\n</code></pre></p>"},{"location":"schema_reference/field_types/#boolean","title":"boolean","text":"<p>True/false value. Can also use the alias <code>bool</code>.</p> <p>Example: <pre><code>is_active:\n  type: boolean\n</code></pre></p>"},{"location":"schema_reference/field_types/#email","title":"email","text":"<p>Email address with appropriate validation.</p> <p>Example: <pre><code>contact:\n  type: email\n</code></pre></p>"},{"location":"schema_reference/field_types/#phone","title":"phone","text":"<p>Phone number field.</p> <p>Example: <pre><code>telephone:\n  type: phone\n</code></pre></p>"},{"location":"schema_reference/field_types/#address","title":"address","text":"<p>Physical address field.</p> <p>Example: <pre><code>location:\n  type: address\n</code></pre></p>"},{"location":"schema_reference/field_types/#url","title":"url","text":"<p>URL/website address.</p> <p>Example: <pre><code>website:\n  type: url\n</code></pre></p>"},{"location":"schema_reference/field_types/#array","title":"array","text":"<p>List of items. Arrays are typically populated using custom generators in the application code.</p> <p>Example: <pre><code>items:\n  type: array\n</code></pre></p>"},{"location":"schema_reference/field_types/#foreign_key","title":"foreign_key","text":"<p>Reference to another table in the database.</p> <p>Example: <pre><code>user_id:\n  type: foreign_key\n</code></pre></p>"},{"location":"schema_reference/field_types/#supported-field-properties","title":"Supported Field Properties","text":"<p>Fields can be defined with additional properties by using an object instead of a string:</p> <p><pre><code>name:\n  type: text\n  description: Full name of the person\n  constraints:\n    max_length: 50\n</code></pre> The following properties can be used when defining fields:</p>"},{"location":"schema_reference/field_types/#description","title":"description","text":"<p>Human-readable description of the field's purpose.</p> <p>Example: <pre><code>email:\n  type: email\n  description: \"User's email address for notifications\"\n</code></pre></p>"},{"location":"schema_reference/field_types/#length","title":"length","text":"<p>Fixed length for the field.</p> <p>Example: <pre><code>zip_code:\n  type: string\n  length: 10\n</code></pre></p>"},{"location":"schema_reference/field_types/#min_length","title":"min_length","text":"<p>Minimum length for string fields.</p> <p>Example: <pre><code>password:\n  type: string\n  min_length: 8\n</code></pre></p>"},{"location":"schema_reference/field_types/#max_length","title":"max_length","text":"<p>Maximum length for string fields.</p> <p>Example: <pre><code>bio:\n  type: text\n  max_length: 250\n</code></pre></p>"},{"location":"schema_reference/field_types/#min","title":"min","text":"<p>Minimum value for numeric fields.</p> <p>Example: <pre><code>min: 0\n</code></pre></p>"},{"location":"schema_reference/field_types/#max","title":"max","text":"<p>Maximum value for numeric fields.</p> <p>Example: <pre><code>max: 1000\n</code></pre></p>"},{"location":"schema_reference/field_types/#decimals","title":"decimals","text":"<p>Number of decimal places for float fields.</p> <p>Example: <pre><code>price:\n  type: float\n  decimals: 2\n</code></pre></p>"},{"location":"schema_reference/field_types/#format","title":"format","text":"<p>Format string specification (for dates, etc.).</p> <p>Example: <pre><code>creation_date:\n  type: date\n  format: \"YYYY-MM-DD\"\n</code></pre></p>"},{"location":"schema_reference/field_types/#enum","title":"enum","text":"<p>List of possible values for the field.</p> <p>Example: <pre><code>status:\n  type: string\n  enum: [\"active\", \"inactive\", \"pending\"]\n</code></pre></p>"},{"location":"schema_reference/field_types/#pattern","title":"pattern","text":"<p>Regular expression pattern for validation.</p> <p>Example: <pre><code>pattern: \"^[A-Z][a-z]+$\"\n</code></pre></p>"},{"location":"schema_reference/field_types/#references","title":"references","text":"<p>Foreign key reference to another table and field.</p> <p>Example: <pre><code>user_id:\n  type: foreign_key\n  references: {\"schema\": \"User\", \"field\": \"id\"}\n</code></pre></p> <p>Note: Field properties are validated during schema validation. For example, using an invalid field type will cause validation to fail with a detailed error message.</p>"},{"location":"schema_reference/field_types/#field-constraints","title":"Field Constraints","text":"<p>Constraints can be specified directly in the field definition or in a separate <code>constraints</code> object:</p> <pre><code>email:\n  type: email\n  constraints:\n    unique: true\n    not_null: true\n</code></pre> <p>The following constraints are supported:</p>"},{"location":"schema_reference/field_types/#not_null","title":"not_null","text":"<p>Field cannot be null or empty.</p> <p>Example: <pre><code>username:\n  type: string\n  constraints:\n    not_null: true\n</code></pre></p>"},{"location":"schema_reference/field_types/#unique","title":"unique","text":"<p>Values must be unique within the dataset.</p> <p>Example: <pre><code>email:\n  type: email\n  constraints:\n    unique: true\n</code></pre></p>"},{"location":"schema_reference/field_types/#primary_key","title":"primary_key","text":"<p>Field is a primary key for the table.</p> <p>Example: <pre><code>id:\n  type: integer\n  constraints:\n    primary_key: true\n</code></pre></p>"},{"location":"schema_reference/field_types/#format_1","title":"format","text":"<p>Format specification for specialized field types.</p> <p>Example: <pre><code>contact:\n  type: string\n  constraints:\n    format: \"email\"\n</code></pre></p>"},{"location":"schema_reference/field_types/#pattern_1","title":"pattern","text":"<p>Regular expression pattern for validation.</p> <p>Example: <pre><code>pattern: \"^[A-Z][a-z]+$\"\n</code></pre></p>"},{"location":"schema_reference/field_types/#min_1","title":"min","text":"<p>Minimum value for numeric fields.</p> <p>Example: <pre><code>min: 0\n</code></pre></p>"},{"location":"schema_reference/field_types/#max_1","title":"max","text":"<p>Maximum value for numeric fields.</p> <p>Example: <pre><code>max: 1000\n</code></pre></p>"},{"location":"schema_reference/field_types/#min_length_1","title":"min_length","text":"<p>Minimum string length for text fields.</p> <p>Example: <pre><code>password:\n  type: string\n  constraints:\n    min_length: 8\n</code></pre></p>"},{"location":"schema_reference/field_types/#max_length_1","title":"max_length","text":"<p>Maximum string length for text fields.</p> <p>Example: <pre><code>description:\n  type: text\n  constraints:\n    max_length: 500\n</code></pre></p>"},{"location":"schema_reference/field_types/#length_1","title":"length","text":"<p>Exact string length for text fields.</p> <p>Example: <pre><code>country_code:\n  type: string\n  constraints:\n    length: 2\n</code></pre></p>"},{"location":"schema_reference/foreign_keys/","title":"Multiple Ways to Define Foreign Keys","text":"<p>Foreign keys can be defined in 2 ways:</p> <ol> <li> <p>Using the <code>__foreign_keys__</code> special section (recommended):    <pre><code>__foreign_keys__:\n  user_id: [User, id]\nuser_id: foreign_key\n</code></pre></p> </li> <li> <p>Using the field definition with <code>references</code>:    <pre><code>user_id:\n  type: foreign_key\n  references:\n    schema: User\n    field: id\n</code></pre></p> </li> </ol>"},{"location":"schema_reference/special_field_types/","title":"Special Field Types","text":"<p>Special field types are prefixed with double underscores. These special sections are validated during schema validation:</p>"},{"location":"schema_reference/special_field_types/#__description__","title":"<code>__description__</code>","text":"<p>It is used to identify the table description for the schema.</p> <pre><code>__description__: Customer information for e-commerce site\n</code></pre>"},{"location":"schema_reference/special_field_types/#__table_description__","title":"<code>__table_description__</code>","text":"<p>It can also be used to identify the table description for the schema.</p> <pre><code>__table_description__: Customer information for e-commerce site\n</code></pre>"},{"location":"schema_reference/special_field_types/#__foreign_keys__","title":"<code>__foreign_keys__</code>","text":"<p>Defines foreign key relationships:</p> <pre><code>__foreign_keys__:\n  user_id: [User, id]\n  product_id: [Product, id]\n</code></pre>"},{"location":"schema_reference/special_field_types/#__depends_on__","title":"<code>__depends_on__</code>","text":"<p>Specifies schema dependencies for generation order:</p> <pre><code>__depends_on__: [Product, Customer]\n</code></pre> <p>This ensures that Product and Customer data are generated before the current schema.</p>"},{"location":"schema_reference/special_field_types/#special-template-related-fields","title":"Special Template-Related Fields","text":"<p>For schemas that generate unstructured document outputs:</p>"},{"location":"schema_reference/special_field_types/#__template__","title":"<code>__template__</code>","text":"<p>It can be set to <code>true</code> or a string value to enable template generation.</p> <pre><code>__template__: true\n</code></pre>"},{"location":"schema_reference/special_field_types/#__template_source__","title":"<code>__template_source__</code>","text":"<p>It is used to specify the path to the template file.</p> <pre><code>__template_source__: /path/to/template.html\n</code></pre>"},{"location":"schema_reference/special_field_types/#__input_file_type__","title":"<code>__input_file_type__</code>","text":"<p>It is used to specify the input file type.</p> <pre><code>__input_file_type__: html\n</code></pre>"},{"location":"schema_reference/special_field_types/#__output_file_type__","title":"<code>__output_file_type__</code>","text":"<p>It is used to specify the output file type.</p> <pre><code>__output_file_type__: pdf\n</code></pre> <p>These fields enable document generation from templates with the synthetic data.</p> <p>Important: When <code>__template__</code> is set to <code>true</code>, the <code>__template_source__</code> field is required. Schema validation will fail if this relationship is not maintained.</p>"}]}