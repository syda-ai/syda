{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Syda Documentation","text":"<p>A Python-based open-source library for generating synthetic data with AI while preserving referential integrity. Syda allows seamless use of OpenAI, Anthropic (Claude), and other AI models to create realistic synthetic data.</p>"},{"location":"#what-is-syda","title":"What is Syda?","text":"<p>Syda is a powerful library that helps developers and data scientists generate high-quality synthetic data using large language models. Whether you need to create test data for your application, training datasets for machine learning, or mock data that maintains complex relationships between tables, Syda provides an elegant solution.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li> <p>Multi-Provider AI Integration:</p> <ul> <li>Seamless integration with multiple AI providers</li> <li>Support for OpenAI (GPT) and Anthropic (Claude). </li> <li>Default model is Anthropic Claude model claude-3-5-haiku-20241022</li> <li>Consistent interface across different providers</li> <li>Provider-specific parameter optimization</li> </ul> </li> <li> <p>LLM-based Data Generation:</p> <ul> <li>AI-powered schema understanding and data creation</li> <li>Contextually-aware synthetic records</li> <li>Natural language prompt customization</li> <li>Intelligent schema inference</li> </ul> </li> <li> <p>Multiple Schema Formats:</p> <ul> <li>YAML/JSON schema file support with full foreign key relationship handling</li> <li>SQLAlchemy model integration with automatic metadata extraction</li> <li>Python dictionary-based schema definitions</li> </ul> </li> <li> <p>Referential Integrity</p> <ul> <li>Automatic foreign key detection and resolution</li> <li>Multi-model dependency analysis through topological sorting</li> <li>Robust handling of related data with referential constraints</li> </ul> </li> <li> <p>Custom Generators</p> <ul> <li>Register column- or type-specific functions for domain-specific data</li> <li>Contextual generators that adapt to other fields (like ICD-10 codes based on demographics)</li> </ul> </li> </ul>"},{"location":"quickstart/","title":"Quick Start","text":""},{"location":"quickstart/#installation","title":"Installation","text":"<p>Install the package using pip:</p> <pre><code>pip install syda\n</code></pre>"},{"location":"quickstart/#prepare-environment-variables","title":"Prepare environment variables","text":"<p>Before running the example, you need to prepare your environment variables with valid OpenAI or Anthropic (Claude) API keys. You can do this in one of two ways:</p> <ol> <li> <p>Create a <code>.env</code> file:</p> <p>Create a <code>.env</code> file in the root of this project with the following content:</p> <pre><code>OPENAI_API_KEY=your_openai_key\nANTHROPIC_API_KEY=your_anthropic_key\n</code></pre> </li> <li> <p>Set environment variables directly:</p> <p>You can also set the environment variables directly in your code:</p> <pre><code>export OPENAI_API_KEY=your_openai_key\nexport ANTHROPIC_API_KEY=your_anthropic_key\n</code></pre> </li> </ol>"},{"location":"quickstart/#example","title":"Example","text":"<pre><code>from syda.structured import SyntheticDataGenerator\nfrom syda.schemas import ModelConfig\nimport os\n\n# Create a model config instance with appropriate max_tokens setting\nmodel_config = ModelConfig(\n    provider=\"anthropic\",\n    model_name=\"claude-3-5-haiku-20241022\",\n    temperature=0.7,\n    max_tokens=8192,  # Using higher max_tokens value for more complete responses\n)\n\n# Create a syda generator instance and pass the model config\ngenerator = SyntheticDataGenerator(model_config=model_config)\n\n# Define output directory\noutput_dir = \"synthetic_output/ecommerce\"\n\n# Define schema dictionaries for an e-commerce system with descriptions\nschemas = {\n    # Customer schema with table and column descriptions\n    'Customer': {\n        # Define schema with additional metadata\n        '__table_description__': 'Registered users of the e-commerce platform who can place orders',\n        'id': {'type': 'number', 'description': 'Unique identifier for the customer'},\n        'name': {'type': 'text', 'description': 'Full name of the customer'},\n        'email': {'type': 'email', 'description': 'Customer email address used for communication'},\n        'signup_date': {'type': 'date', 'description': 'Date when the customer registered'},\n        'loyalty_tier': {'type': 'text', 'description': 'Customer loyalty program level (Bronze, Silver, Gold, Platinum)'}\n    },\n\n    # Product schema with table and column descriptions\n    'Product': {\n        '__table_description__': 'Products available for purchase in the e-commerce store',\n        'id': {'type': 'number', 'description': 'Unique identifier for the product'},\n        'name': {'type': 'text', 'description': 'Name of the product as displayed to customers'},\n        'category': {'type': 'text', 'description': 'Product category for classification and filtering'},\n        'price': {'type': 'number', 'description': 'Current price of the product in USD'},\n        'description': {'type': 'text', 'description': 'Detailed description of the product features and benefits'},\n        'in_stock': {'type': 'boolean', 'description': 'Whether the product is currently available for purchase'}\n    },\n\n    # Order schema with table and column descriptions\n    'Order': {\n        # Define schema with additional metadata\n        '__table_description__': 'Customer orders for products, including order status and total amount',\n        '__foreign_keys__': {\n            'customer_id': ['Customer', 'id']  # Order.customer_id references Customer.id\n        },\n\n        # Define columns\n        'id': {'type': 'number', 'description': 'Unique order identifier', 'primary_key': True},\n        'customer_id': {'type': 'foreign_key', 'description': 'Reference to the customer who placed the order'},\n        'order_date': {'type': 'date', 'description': 'Date when the order was placed'},\n        'status': {'type': 'text', 'description': 'Current status of the order (Pending, Processing, Shipped, Delivered, Cancelled)'},\n        'total_amount': {'type': 'number', 'description': 'Total amount of the order in USD'},\n        'shipping_address': {'type': 'text', 'description': 'Address where the order should be delivered'}\n    },\n\n    # OrderItem schema with table and column descriptions\n    'OrderItem': {\n        '__table_description__': 'Individual line items within an order, representing specific products',\n        '__foreign_keys__': {\n            'order_id': ['Order', 'id'],       # OrderItem.order_id references Order.id\n            'product_id': ['Product', 'id']    # OrderItem.product_id references Product.id\n        },\n\n        # Define columns\n        'id': {'type': 'number', 'description': 'Unique identifier for the order item'},\n        'order_id': {'type': 'foreign_key', 'description': 'Reference to the parent order'},\n        'product_id': {'type': 'foreign_key', 'description': 'Reference to the product being ordered'},\n        'quantity': {'type': 'number', 'description': 'Number of units of the product ordered'},\n        'unit_price': {'type': 'number', 'description': 'Price per unit at the time of order, may differ from current product price'}\n    }\n}\n\n# Define foreign key relationships\nforeign_keys = {\n    'Order': {\n        'customer_id': ('Customer', 'id')  # Order.customer_id references Customer.id\n    },\n    'OrderItem': {\n        'order_id': ('Order', 'id'),       # OrderItem.order_id references Order.id\n        'product_id': ('Product', 'id')    # OrderItem.product_id references Product.id\n    }\n}\n\n# Define custom prompts for each schema (optional)\nprompts = {\n    \"Customer\": \"\"\"\n    Generate diverse customers for an e-commerce platform.\n    Include various loyalty tiers (Bronze, Silver, Gold, Platinum)\n    and realistic signup dates within the last 3 years.\n    \"\"\",\n\n    \"Product\": \"\"\"\n    Generate diverse products for an e-commerce store.\n    Include various categories (Electronics, Clothing, Home, Books, etc.)\n    with realistic prices and descriptions.\n    \"\"\",\n\n    \"Order\": \"\"\"\n    Generate realistic orders with appropriate dates and statuses\n    (Pending, Processing, Shipped, Delivered, Cancelled).\n    Total amounts should reflect typical e-commerce purchases.\n    \"\"\"\n}\n\n# Define sample sizes for each schema (optional)\nsample_sizes = {\n    \"Customer\": 10,       # Base entities\n    \"Product\": 15,        # Product catalog\n    \"Order\": 25,          # ~2-3 orders per customer\n    \"OrderItem\": 50,      # ~2 items per order\n}\n\nprint(\"\\n\ud83d\udd04 Generating related data for E-commerce system...\")\nprint(\"  The system will automatically determine the right generation order\")\nprint(\"  and set up foreign key relationships\\n\")\n\n# Generate data using the unified generate_for_schemas method\nresults = generator.generate_for_schemas(\n    schemas=schemas,\n    prompts=prompts,\n    sample_sizes=sample_sizes,\n    output_dir=output_dir\n)\n</code></pre>"},{"location":"deep_dive/combined_data/","title":"Combined Structured and Unstructured Data","text":"<p>One of the most powerful features of SYDA is the ability to generate both structured database records and unstructured document content in a single integrated workflow. This capability is essential for many real-world applications that require consistency between database records and their associated documents.</p>"},{"location":"deep_dive/combined_data/#connecting-documents-to-structured-data","title":"Connecting Documents to Structured Data","text":"<p>SYDA provides multiple methods for linking documents with their corresponding structured data:</p>"},{"location":"deep_dive/combined_data/#1-using-foreign-keys","title":"1. Using Foreign Keys","text":"<p>Documents can reference structured data through foreign key relationships:</p> <pre><code># Dictionary schema example with foreign keys\nschemas = {\n    'Customer': {\n        'id': {'type': 'integer', 'primary_key': True},\n        'name': {'type': 'string'},\n        'industry': {'type': 'string'},\n    },\n    'Contract': {\n        '__template__': 'templates/contract.html',\n        '__template_source__': 'file',\n        '__input_file_type__': 'html',\n        '__output_file_type__': 'pdf',\n\n        'id': {'type': 'integer', 'primary_key': True},\n        'title': {'type': 'string'},\n        'customer_id': {\n            'type': 'integer',\n            'references': {'table': 'Customer', 'column': 'id'}\n        },\n        'terms': {'type': 'string'},\n        'start_date': {'type': 'date'},\n        'end_date': {'type': 'date'},\n    }\n}\n</code></pre>"},{"location":"deep_dive/combined_data/#2-using-sqlalchemy-models-with-templates","title":"2. Using SQLAlchemy Models with Templates","text":"<p>When using SQLAlchemy, you can define document models with template attributes:</p> <pre><code>class Customer(Base):\n    __tablename__ = 'customers'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String(100), comment=\"Name of the customer organization\")\n    industry = Column(String(50), comment=\"Customer's primary industry\")\n\nclass Contract(Base):\n    __tablename__ = 'contracts'\n\n    # Template processing attributes\n    __template__ = 'templates/contract_template.html'\n    __template_source__ = 'file'\n    __input_file_type__ = 'html'\n    __output_file_type__ = 'pdf'\n\n    id = Column(Integer, primary_key=True)\n    title = Column(String(200), comment=\"Contract title\")\n    customer_id = Column(Integer, ForeignKey('customers.id'))\n    terms = Column(Text, comment=\"Legal terms of the contract\")\n    start_date = Column(Date, comment=\"Contract start date\")\n    end_date = Column(Date, comment=\"Contract end date\")\n\n    # Define the relationship\n    customer = relationship(\"Customer\")\n</code></pre>"},{"location":"deep_dive/combined_data/#schema-dependencies-for-documents","title":"Schema Dependencies for Documents","text":"<p>To ensure that document generation occurs after its referenced data is available, SYDA provides dependency management:</p>"},{"location":"deep_dive/combined_data/#1-explicit-dependencies","title":"1. Explicit Dependencies","text":"<p>You can define explicit dependencies using the <code>__depends_on__</code> attribute:</p> <pre><code># In dictionary schemas\nschemas = {\n    'Customer': {\n        'id': {'type': 'integer', 'primary_key': True},\n        'name': {'type': 'string'},\n    },\n    'Contract': {\n        '__depends_on__': ['Customer'],  # Explicit dependency\n        '__template__': 'templates/contract.html',\n        'id': {'type': 'integer', 'primary_key': True},\n        'customer_id': {\n            'type': 'integer',\n            'references': {'table': 'Customer', 'column': 'id'}\n        },\n        'content': {'type': 'string'},\n    }\n}\n</code></pre>"},{"location":"deep_dive/combined_data/#2-automatic-dependency-resolution","title":"2. Automatic Dependency Resolution","text":"<p>SYDA also automatically detects dependencies through foreign key relationships. This means that document schemas with foreign keys to other tables will be generated after those tables are available.</p>"},{"location":"deep_dive/combined_data/#template-enrichment-from-related-data","title":"Template Enrichment from Related Data","text":"<p>Document templates can access fields from related records using custom generators:</p> <pre><code>def enrich_contract_data(table_name, column_name, row_data, dependencies=None):\n    \"\"\"\n    Enriches contract data with customer information.\n    \"\"\"\n    if not dependencies or 'Customer' not in dependencies:\n        return row_data\n\n    customer_id = row_data.get('customer_id')\n    if customer_id is None:\n        return row_data\n\n    # Find the customer record with this ID\n    customer = None\n    for cust in dependencies['Customer']:\n        if cust['id'] == customer_id:\n            customer = cust\n            break\n\n    if customer:\n        # Add customer fields to the contract data\n        row_data['customer_name'] = customer['name']\n        row_data['customer_industry'] = customer.get('industry', 'Unknown')\n\n    return row_data\n</code></pre>"},{"location":"deep_dive/combined_data/#complete-example-crm-system-with-documents","title":"Complete Example: CRM System with Documents","text":"<p>Here's a complete example of a CRM system that generates both structured data and documents:</p> <pre><code>from syda import SyntheticDataGenerator, ModelConfig\nfrom sqlalchemy import Column, Integer, String, Text, Date, ForeignKey, Float\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import relationship\n\nBase = declarative_base()\n\n# Define SQLAlchemy models\nclass Customer(Base):\n    __tablename__ = 'customers'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String(100), comment=\"Customer company name\")\n    industry = Column(String(50), comment=\"Customer's industry\")\n    address = Column(String(200), comment=\"Customer's address\")\n\nclass Opportunity(Base):\n    __tablename__ = 'opportunities'\n\n    id = Column(Integer, primary_key=True)\n    customer_id = Column(Integer, ForeignKey('customers.id'))\n    name = Column(String(100), comment=\"Name/title of the opportunity\")\n    value = Column(Float, comment=\"Potential value of the opportunity\")\n    description = Column(Text, comment=\"Description of the opportunity\")\n\n    customer = relationship(\"Customer\")\n\nclass ProposalDocument(Base):\n    __tablename__ = 'proposal_documents'\n\n    # Template attributes\n    __template__ = 'templates/proposal_template.html'\n    __template_source__ = 'file'\n    __input_file_type__ = 'html'\n    __output_file_type__ = 'pdf'\n    __depends_on__ = ['opportunities']\n\n    id = Column(Integer, primary_key=True)\n    opportunity_id = Column(Integer, ForeignKey('opportunities.id'))\n    title = Column(String(100), comment=\"Title of the proposal\")\n    subtitle = Column(String(200), comment=\"Subtitle or tagline\")\n    prepared_by = Column(String(100), comment=\"Name of the sales representative\")\n    created_date = Column(Date, comment=\"Date the proposal was created\")\n    proposed_solutions = Column(Text, comment=\"Detailed description of proposed solutions\")\n    implementation_timeline = Column(Text, comment=\"Timeline for implementation\")\n    pricing_details = Column(Text, comment=\"Pricing breakdown and details\")\n    terms_and_conditions = Column(Text, comment=\"Legal terms and conditions\")\n\n    opportunity = relationship(\"Opportunity\")\n\n# Custom generator to enrich proposals with customer and opportunity data\ndef enrich_proposal(table_name, column_name, row_data, dependencies=None):\n    \"\"\"Enrich proposal with customer and opportunity data for the template.\"\"\"\n    if not dependencies or 'opportunities' not in dependencies:\n        return row_data\n\n    opportunity_id = row_data.get('opportunity_id')\n    if opportunity_id is None:\n        return row_data\n\n    # Find the opportunity\n    opportunity = None\n    for opp in dependencies['opportunities']:\n        if opp['id'] == opportunity_id:\n            opportunity = opp\n            break\n\n    if opportunity and 'customers' in dependencies:\n        # Add opportunity data to proposal\n        row_data['opportunity_name'] = opportunity['name']\n        row_data['opportunity_value'] = opportunity['value']\n        row_data['opportunity_description'] = opportunity['description']\n\n        # Find and add customer data\n        customer_id = opportunity['customer_id']\n        for cust in dependencies['customers']:\n            if cust['id'] == customer_id:\n                row_data['customer_name'] = cust['name']\n                row_data['customer_address'] = cust['address']\n                break\n\n    return row_data\n\n# Generate data\ndef main():\n    config = ModelConfig(provider=\"anthropic\", model_name=\"claude-3-5-haiku-20241022\")\n    generator = SyntheticDataGenerator(model_config=config)\n\n    custom_generators = {\n        'proposal_documents': {\n            '*': enrich_proposal  # Apply to all rows in the table\n        }\n    }\n\n    # Generate all data with proper dependencies\n    results = generator.generate_for_sqlalchemy_models(\n        sqlalchemy_models=[Customer, Opportunity, ProposalDocument],\n        sample_sizes={\n            \"customers\": 5,\n            \"opportunities\": 10,\n            \"proposal_documents\": 10\n        },\n        prompts={\n            \"customers\": \"Generate diverse B2B technology customers\",\n            \"opportunities\": \"Generate sales opportunities for enterprise software\",\n            \"proposal_documents\": \"Generate professional sales proposals\"\n        },\n        custom_generators=custom_generators,\n        output_dir=\"output/crm\"\n    )\n\n    print(\"Generated data:\")\n    for model_name, df in results.items():\n        print(f\"{model_name}: {len(df)} records\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"deep_dive/combined_data/#best-practices","title":"Best Practices","text":"<ol> <li>Define Clear Dependencies: Use <code>__depends_on__</code> to ensure correct generation order</li> <li>Enrich Templates with Custom Generators: Create custom generators that add fields from related tables</li> <li>Use Consistent Naming: Maintain consistent field names between schemas and templates</li> <li>Handle Missing Data: Ensure custom generators gracefully handle missing related records</li> <li>Optimize Template Performance: Keep templates simple and efficient for large datasets</li> <li>Test End-to-End: Always test the complete generation pipeline from database to documents</li> </ol>"},{"location":"deep_dive/core_api/","title":"Core API","text":"<p>SYDA's core API provides a powerful and flexible framework for generating synthetic data across multiple related tables while maintaining referential integrity. This document provides a comprehensive overview of the key components and usage patterns.</p>"},{"location":"deep_dive/core_api/#syntheticdatagenerator","title":"SyntheticDataGenerator","text":"<p>The central class in SYDA is <code>SyntheticDataGenerator</code>, which provides methods for generating data from different schema formats:</p> <pre><code>from syda import SyntheticDataGenerator, ModelConfig\n\n# Configure the model\nconfig = ModelConfig(provider=\"anthropic\", model_name=\"claude-3-5-haiku-20241022\")\n\n# Initialize the generator\ngenerator = SyntheticDataGenerator(model_config=config)\n</code></pre>"},{"location":"deep_dive/core_api/#structured-data-generation","title":"Structured Data Generation","text":"<p>SYDA supports three primary methods for generating structured data. For detailed information on supported field types, special field types, and format options, please refer to the Schema Reference section.</p>"},{"location":"deep_dive/core_api/#1-dictionary-based-schemas","title":"1. Dictionary-Based Schemas","text":"<p>The most flexible approach uses Python dictionaries to define schemas:</p> <pre><code># Define schemas as dictionaries\nschemas = {\n    'Customer': {\n        'id': {'type': 'integer', 'primary_key': True},\n        'name': {'type': 'string'},\n        'email': {'type': 'string', 'format': 'email'},\n        'registration_date': {'type': 'date'}\n    },\n    'Order': {\n        'id': {'type': 'integer', 'primary_key': True},\n        'customer_id': {\n            'type': 'integer',\n            'references': {'table': 'Customer', 'column': 'id'}\n        },\n        'order_date': {'type': 'date'},\n        'total_amount': {'type': 'number', 'format': 'float'}\n    }\n}\n\n# Generate data\nresults = generator.generate_for_schemas(\n    schemas=schemas,\n    sample_sizes={\n        'Customer': 10,\n        'Order': 25\n    },\n    prompts={\n        'Customer': 'Generate realistic customer data for an e-commerce store',\n        'Order': 'Generate order data with reasonable purchase amounts and dates'\n    },\n    output_dir='output/data'\n)\n</code></pre>"},{"location":"deep_dive/core_api/#2-yamljson-schemas","title":"2. YAML/JSON Schemas","text":"<p>You can load schemas from YAML or JSON files, which is useful for storing schema definitions outside your code:</p> <pre><code>from syda import SyntheticDataGenerator, ModelConfig\nimport yaml\n\n# Load schemas from YAML files\nwith open('schemas/customer.yaml', 'r') as f:\n    customer_schema = yaml.safe_load(f)\n\nwith open('schemas/order.yaml', 'r') as f:\n    order_schema = yaml.safe_load(f)\n\nschemas = {\n    'Customer': customer_schema,\n    'Order': order_schema\n}\n\n# Generate data\nconfig = ModelConfig(provider=\"anthropic\", model_name=\"claude-3-5-haiku-20241022\")\ngenerator = SyntheticDataGenerator(model_config=config)\nresults = generator.generate_for_schemas(\n    schemas=schemas,\n    sample_sizes={'Customer': 10, 'Order': 25}\n)\n</code></pre> <p>Example YAML schema:</p> <pre><code># customer.yaml\nid:\n  type: integer\n  primary_key: true\nname:\n  type: string\nemail:\n  type: string\n  format: email\nregistration_date:\n  type: date\n</code></pre>"},{"location":"deep_dive/core_api/#3-sqlalchemy-models","title":"3. SQLAlchemy Models","text":"<p>For applications already using SQLAlchemy, SYDA can work directly with your models:</p> <pre><code>from syda import SyntheticDataGenerator, ModelConfig\nfrom sqlalchemy import Column, Integer, String, Date, Float, ForeignKey, create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import relationship\n\nBase = declarative_base()\n\nclass Customer(Base):\n    __tablename__ = 'customers'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String(100), comment=\"Customer's full name\")\n    email = Column(String(100), comment=\"Email address\")\n    registration_date = Column(Date, comment=\"When the customer registered\")\n\nclass Order(Base):\n    __tablename__ = 'orders'\n\n    id = Column(Integer, primary_key=True)\n    customer_id = Column(Integer, ForeignKey('customers.id'))\n    order_date = Column(Date, comment=\"When the order was placed\")\n    total_amount = Column(Float, comment=\"Total order amount in USD\")\n\n    # Define relationship\n    customer = relationship(\"Customer\")\n\n# Generate data from SQLAlchemy models\nconfig = ModelConfig(provider=\"anthropic\", model_name=\"claude-3-5-haiku-20241022\")\ngenerator = SyntheticDataGenerator(model_config=config)\nresults = generator.generate_for_sqlalchemy_models(\n    sqlalchemy_models=[Customer, Order],\n    sample_sizes={\n        'customers': 10,\n        'orders': 25\n    },\n    prompts={\n        'customers': 'Generate realistic customer data',\n        'orders': 'Generate order data with valid amounts'\n    },\n    output_dir='output/sqlalchemy_data'\n)\n</code></pre>"},{"location":"deep_dive/core_api/#multi-model-generation","title":"Multi-Model Generation","text":"<p>SYDA supports generating data for multiple related models in a single operation:</p> <pre><code># Define multiple related schemas\nschemas = {\n    'Customer': {...},\n    'Product': {...},\n    'Order': {...},\n    'OrderItem': {...},\n    'Invoice': {...}\n}\n\n# Generate data for all schemas\nresults = generator.generate_for_schemas(\n    schemas=schemas,\n    sample_sizes={\n        'Customer': 10,\n        'Product': 20,\n        'Order': 30,\n        'OrderItem': 75,\n        'Invoice': 30\n    },\n    prompts={...},\n    output_dir='output/ecommerce'\n)\n</code></pre> <p>SYDA automatically:</p> <ol> <li> <p>Determines the correct generation order based on dependencies</p> </li> <li> <p>Ensures referential integrity between tables</p> </li> <li> <p>Provides access to related records during generation</p> </li> </ol>"},{"location":"deep_dive/core_api/#prompting-strategies","title":"Prompting Strategies","text":"<p>Effective prompts significantly improve the quality of generated data:</p> <pre><code>results = generator.generate_for_schemas(\n    schemas=schemas,\n    sample_sizes={'Customer': 10},\n    prompts={\n        'Customer': 'Generate diverse customer data for a B2B software company. Include customers from various industries, with realistic company names, and valid email domains. Make some customers enterprise level and others small businesses.'\n    }\n)\n</code></pre> <p>Best practices for prompts:</p> <ol> <li> <p>Be specific about the domain and context</p> </li> <li> <p>Specify the range and distribution of values where relevant</p> </li> <li> <p>Mention any constraints or patterns to follow</p> </li> <li> <p>Provide examples for complex or unusual formats</p> </li> </ol>"},{"location":"deep_dive/core_api/#working-with-results","title":"Working with Results","text":"<p>The generated data is returned as a dictionary of pandas DataFrames:</p> <pre><code>results = generator.generate_for_schemas(\n    schemas=schemas,\n    sample_sizes={'Customer': 10, 'Order': 25}\n)\n\n# Access the generated DataFrames\ncustomer_df = results['Customer']\norder_df = results['Order']\n\n# Basic analysis\nprint(f\"Generated {len(customer_df)} customer records\")\nprint(f\"Generated {len(order_df)} order records\")\n\n# Data exploration\nprint(customer_df.head())\nprint(order_df.describe())\n\n# Save to different formats\ncustomer_df.to_csv('customers_export.csv')\norder_df.to_excel('orders_export.xlsx')\n</code></pre>"},{"location":"deep_dive/core_api/#advanced-configuration","title":"Advanced Configuration","text":"<p>SYDA provides several options for advanced configuration:</p> <pre><code># Configure LLM parameters\nconfig = ModelConfig(\n    provider=\"anthropic\",\n    model_name=\"claude-3-5-haiku-20241022\",\n    temperature=0.4,  # Lower temperature for more consistent results\n    max_tokens=4000   # Adjust token limit for complex schemas\n)\n\n# Generate with advanced options\nresults = generator.generate_for_schemas(\n    schemas=schemas,\n    prompts={\"Customer\": \"Generate diverse customers for an e-commerce platform.\"},\n    sample_sizes={\"Customer\": 10, \"Order\": 25},\n    default_sample_size=5,   # Default number of records for schemas not in sample_sizes\n    default_prompt=\"Generate synthetic data\",  # Default prompt for schemas not in prompts\n    output_dir=\"output\",   # Save results to this directory\n    output_format=\"csv\",   # Format to save files in (csv or json)\n    custom_generators={...}  # Use custom generator functions\n)\n</code></pre>"},{"location":"deep_dive/custom_generators/","title":"Custom Generators","text":"<p>Custom generators in SYDA provide a powerful way to control and customize the data generation process. They allow you to define specific logic for generating or transforming field values beyond what the LLM can do alone.</p>"},{"location":"deep_dive/custom_generators/#when-to-use-custom-generators","title":"When to Use Custom Generators","text":"<p>Custom generators are particularly useful when you need to:</p> <ol> <li>Use existing data to generate values</li> <li>Ensure consistency across related records for complex relationships</li> <li>Compute values based on other fields</li> <li>Implement complex business rules</li> <li>Access data from related tables</li> <li>Post-process LLM-generated content</li> </ol>"},{"location":"deep_dive/custom_generators/#creating-custom-generators","title":"Creating Custom Generators","text":"<p>A custom generator is simply a Python function that follows this signature:</p> <pre><code>def my_custom_generator(row, col_name=None, parent_dfs=None):\n    \"\"\"\n    Generate or transform a value for a specific field.\n\n    Args:\n        row: The current row being processed (as a pandas Series or dict-like object)\n        col_name: The name of the column being generated\n        parent_dfs: Dictionary of previously generated dataframes (schema name as key)\n\n    Returns:\n        The value to use for this field\n    \"\"\"\n    # Your custom logic here\n    return generated_value\n</code></pre>"},{"location":"deep_dive/custom_generators/#simple-example-calculating-tax-amount","title":"Simple Example: Calculating Tax Amount","text":"<p>Here's a simple example that calculates tax amount based on subtotal and tax rate:</p> <pre><code>def calculate_tax(row, col_name=None):\n    \"\"\"Calculate tax amount based on subtotal and tax rate.\"\"\"\n    return round(row[\"subtotal\"] * row[\"tax_rate\"] / 100, 2)\n\ndef calculate_total(row, col_name=None):\n    \"\"\"Calculate total from subtotal, tax, and discount.\"\"\"\n    return round(row[\"subtotal\"] + row[\"tax_amount\"] - row[\"discount_amount\"], 2)\n</code></pre>"},{"location":"deep_dive/custom_generators/#complex-example-generating-receipt-items","title":"Complex Example: Generating Receipt Items","text":"<p>Here's a more complex example from the retail example project that generates receipt items by accessing previously generated data from other tables:</p> <pre><code>def generate_receipt_items(row, col_name=None, parent_dfs=None):\n    \"\"\"Custom generator for the items field in receipts.\n\n    Uses the Product and Transaction data from parent_dfs to populate receipt items.\n\n    Args:\n        row: The current row being processed\n        col_name: The name of the column being generated\n        parent_dfs: Dictionary of previously generated dataframes (schema name as key)\n    \"\"\"\n    items = []\n    subtotal = 0.0\n\n    try:\n        # Get customer ID\n        customer_id = row.get('customer_id', None)\n\n        # Use the parent_dfs parameter which contains the generated data\n        if parent_dfs and 'Product' in parent_dfs and 'Transaction' in parent_dfs:\n            # Get Product and Transaction data from parent_dfs\n            products_df = parent_dfs['Product']\n            transactions_df = parent_dfs['Transaction']\n\n            # Filter transactions for this customer if possible\n            if customer_id and 'customer_id' in transactions_df.columns:\n                customer_transactions = transactions_df[transactions_df['customer_id'] == customer_id]\n                if len(customer_transactions) == 0:\n                    # If no matching transactions, just take random ones\n                    customer_transactions = transactions_df.sample(min(5, len(transactions_df)))\n            else:\n                # If no customer ID or column, just take random transactions\n                customer_transactions = transactions_df.sample(min(5, len(transactions_df)))\n\n            # Process each transaction to create a receipt item\n            for _, tx in customer_transactions.iterrows():\n                # Get product information\n                if 'product_id' in tx and tx['product_id'] is not None:\n                    product_matches = products_df[products_df['id'] == tx['product_id']]\n                    if len(product_matches) &gt; 0:\n                        product = product_matches.iloc[0]\n\n                        # Extract product details\n                        product_name = product['name']\n                        sku = product['sku']\n                        unit_price = float(product['price'])\n                        quantity = int(tx['quantity'])\n\n                        # Calculate item total\n                        item_total = round(quantity * unit_price, 2)\n\n                        # Add to items list\n                        items.append({\n                            \"product_name\": product_name,\n                            \"sku\": sku,\n                            \"quantity\": quantity,\n                            \"unit_price\": unit_price,\n                            \"item_total\": item_total\n                        })\n\n                        # Update subtotal\n                        subtotal += item_total\n\n        # Update the row's subtotal\n        row[\"subtotal\"] = round(subtotal, 2)\n\n    except Exception as e:\n        # Log any errors\n        print(f\"Error generating receipt items: {str(e)}\")\n\n    return items\n</code></pre>"},{"location":"deep_dive/custom_generators/#registering-custom-generators","title":"Registering Custom Generators","text":"<p>Custom generators are registered by passing them to the <code>generate_for_schemas</code> or <code>generate_for_sqlalchemy_models</code> method via the <code>custom_generators</code> parameter:</p> <pre><code>from syda.generate import SyntheticDataGenerator\nfrom syda.schemas import ModelConfig\n\n# Define custom generators for field calculations\ndef calculate_tax(row, col_name=None):\n    \"\"\"Calculate tax amount based on subtotal and tax rate.\"\"\"\n    return round(row[\"subtotal\"] * row[\"tax_rate\"] / 100, 2)\n\ndef calculate_total(row, col_name=None):\n    \"\"\"Calculate total from subtotal, tax, and discount.\"\"\"\n    return round(row[\"subtotal\"] + row[\"tax_amount\"] - row[\"discount_amount\"], 2)\n\ndef generate_receipt_items(row, col_name=None, parent_dfs=None):\n    \"\"\"Generate items for a receipt based on products and transactions.\"\"\"\n    # Implementation shown in earlier example\n    return items\n\n# Register custom generators - schema name as key, then field name as sub-key\ncustom_generators = {\n    \"Receipt\": {\n        \"items\": generate_receipt_items,\n        \"tax_amount\": calculate_tax,\n        \"total\": calculate_total\n    }\n}\n\n# Initialize the generator\nconfig = ModelConfig(\n    provider=\"anthropic\", \n    model=\"claude-3-haiku-20240307\",\n    max_tokens=8192\n)\ngenerator = SyntheticDataGenerator(model_config=config)\n\n# Use custom generators during data generation\nresults = generator.generate_for_schemas(\n    schemas=schemas,\n    sample_sizes=sample_sizes,\n    prompts=prompts,\n    custom_generators=custom_generators,\n    output_dir=OUTPUT_DIR\n)\n</code></pre>"},{"location":"deep_dive/custom_generators/#best-practices","title":"Best Practices","text":"<ol> <li>Keep Generators Simple: Each generator should have a single responsibility</li> <li>Handle Missing Data: Always check if required fields exist before using them</li> <li>Use Type Checking: Verify data types before performing operations on values</li> <li>Add Error Handling: Catch exceptions to prevent generator failures</li> <li>Document Your Generators: Include clear docstrings that explain functionality</li> <li>Test in Isolation: Test generators independently with sample data</li> <li>Avoid Side Effects: Unless needed (like the receipt example), generators shouldn't modify unrelated state</li> </ol>"},{"location":"deep_dive/custom_generators/#examples","title":"Examples","text":"<p>To see custom generator in action, explore  SQLAlchemy Example and Yaml Example </p>"},{"location":"deep_dive/error_handling/","title":"Error Handling and Troubleshooting","text":"<p>Effective error handling is crucial when generating synthetic data at scale. This guide covers common error scenarios in SYDA and how to troubleshoot and resolve them.</p>"},{"location":"deep_dive/error_handling/#common-error-types","title":"Common Error Types","text":""},{"location":"deep_dive/error_handling/#schema-validation-errors","title":"Schema Validation Errors","text":"<p>Schema validation errors occur when your schema definition doesn't meet SYDA's requirements:</p> <pre><code># Missing required field type\nschemas = {\n    'Customer': {\n        'id': {'primary_key': True},  # Missing 'type' property\n        'name': {'type': 'string'}\n    }\n}\n</code></pre> <p>Resolution: Ensure all fields have at least a <code>type</code> property and that required special attributes are included.</p>"},{"location":"deep_dive/error_handling/#foreign-key-errors","title":"Foreign Key Errors","text":"<p>Foreign key errors happen when references are invalid or circular:</p> <pre><code>ValueError: Circular dependency detected in schema: 'OrderItem' \u2192 'Order' \u2192 'Customer' \u2192 'PreferredStore' \u2192 'OrderItem'\n</code></pre> <p>Resolution: Check your schema for circular references and ensure that all foreign key references point to valid tables and columns.</p>"},{"location":"deep_dive/error_handling/#template-processing-errors","title":"Template Processing Errors","text":"<p>Template processing errors occur when Jinja2 template rendering fails:</p> <pre><code>jinja2.exceptions.UndefinedError: 'discount_amount' is undefined\n</code></pre> <p>Resolution: 1. Check that all variables used in templates are properly defined 2. Use the <code>default</code> filter for optional variables: <code>0</code> 3. When embedding templates in Markdown, wrap them in <code>and</code> tags</p>"},{"location":"deep_dive/error_handling/#model-api-errors","title":"Model API Errors","text":"<p>Model API errors happen when communication with the LLM provider fails:</p> <pre><code>anthropic.RateLimitError: Rate limit exceeded, please retry after 5s\n</code></pre> <p>Resolution: 1. Implement proper error handling with exponential backoff 2. Consider using a different model or provider 3. Monitor API usage and adjust batch sizes accordingly</p>"},{"location":"deep_dive/error_handling/#implementing-error-handling","title":"Implementing Error Handling","text":"<p>Here's an example of robust error handling when generating data:</p> <pre><code>from syda import SyntheticDataGenerator, ModelConfig\nimport time\nimport logging\n\n# Set up logging\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\nlogger = logging.getLogger('syda')\n\ndef generate_with_retry(generator, schemas, sample_sizes, max_retries=3):\n    \"\"\"Generate data with retry logic for API errors\"\"\"\n    retry_count = 0\n    while retry_count &lt; max_retries:\n        try:\n            results = generator.generate_for_schemas(\n                schemas=schemas,\n                sample_sizes=sample_sizes,\n                output_dir=\"output/data\"\n            )\n            return results\n        except Exception as e:\n            retry_count += 1\n            wait_time = 2 ** retry_count  # Exponential backoff\n\n            if \"Rate limit\" in str(e) and retry_count &lt; max_retries:\n                logger.warning(f\"Rate limit hit. Retrying in {wait_time} seconds...\")\n                time.sleep(wait_time)\n                continue\n            elif retry_count &lt; max_retries:\n                logger.error(f\"Error during generation: {str(e)}. Retrying in {wait_time} seconds...\")\n                time.sleep(wait_time)\n                continue\n            else:\n                logger.error(f\"Failed after {max_retries} attempts: {str(e)}\")\n                raise\n\n# Usage\nconfig = ModelConfig(provider=\"anthropic\", model_name=\"claude-3-5-haiku-20241022\")\ngenerator = SyntheticDataGenerator(model_config=config)\n\ntry:\n    results = generate_with_retry(generator, schemas, {\"Customer\": 10, \"Order\": 25})\n    logger.info(\"Generation completed successfully\")\nexcept Exception as e:\n    logger.critical(f\"Generation failed completely: {str(e)}\")\n</code></pre>"},{"location":"deep_dive/error_handling/#schema-validation","title":"Schema Validation","text":"<p>SYDA performs validation before generating data to catch common issues:</p> <pre><code>from syda import SyntheticDataGenerator, ModelConfig, validate_schemas\n\n# Validate schemas before generation\nschemas = {\n    'Customer': {\n        'id': {'type': 'integer', 'primary_key': True},\n        'name': {'type': 'string'}\n    },\n    'Order': {\n        'id': {'type': 'integer', 'primary_key': True},\n        'customer_id': {\n            'type': 'integer',\n            'references': {'table': 'Customer', 'column': 'id'}\n        }\n    }\n}\n\ntry:\n    # Perform validation only\n    validate_schemas(schemas)\n    print(\"Schemas are valid\")\n\n    # Proceed with generation\n    config = ModelConfig(provider=\"anthropic\")\n    generator = SyntheticDataGenerator(model_config=config)\n    results = generator.generate_for_schemas(schemas=schemas, sample_sizes={\"Customer\": 5, \"Order\": 10})\n\nexcept ValueError as e:\n    print(f\"Schema validation error: {str(e)}\")\n</code></pre>"},{"location":"deep_dive/error_handling/#debugging-tips","title":"Debugging Tips","text":""},{"location":"deep_dive/error_handling/#enable-debug-logging","title":"Enable Debug Logging","text":"<p>Set the logging level to DEBUG for more detailed information:</p> <pre><code>import logging\nlogging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(name)s - %(message)s')\n</code></pre>"},{"location":"deep_dive/error_handling/#incremental-generation","title":"Incremental Generation","text":"<p>For complex schemas, generate one table at a time to isolate issues:</p> <pre><code># Generate Customer data first\ncustomer_results = generator.generate_for_schemas(\n    schemas={'Customer': schemas['Customer']},\n    sample_sizes={'Customer': 5}\n)\n\n# Then generate Order data\nall_schemas = {'Customer': schemas['Customer'], 'Order': schemas['Order']}\norder_results = generator.generate_for_schemas(\n    schemas=all_schemas,\n    sample_sizes={'Order': 10},\n    existing_data={'Customer': customer_results['Customer']}\n)\n</code></pre>"},{"location":"deep_dive/error_handling/#template-debugging","title":"Template Debugging","text":"<p>To debug template rendering issues:</p> <ol> <li>Test templates separately with sample data:</li> </ol> <pre><code>import jinja2\n\n# Create environment\nenv = jinja2.Environment(\n    loader=jinja2.FileSystemLoader(\"templates/\")\n)\n\n# Sample data\nsample_data = {\n    \"customer_name\": \"Acme Corp\",\n    \"order_id\": 1234,\n    \"items\": [\n        {\"name\": \"Product A\", \"quantity\": 2, \"price\": 10.50},\n        {\"name\": \"Product B\", \"quantity\": 1, \"price\": 25.00}\n    ]\n}\n\n# Render template\ntemplate = env.get_template(\"invoice.html\")\ntry:\n    result = template.render(**sample_data)\n    print(\"Template rendered successfully\")\nexcept Exception as e:\n    print(f\"Template error: {str(e)}\")\n</code></pre> <ol> <li>Use template debugging mode to print undefined variables instead of raising errors:</li> </ol> <pre><code>env = jinja2.Environment(\n    loader=jinja2.FileSystemLoader(\"templates/\"),\n    undefined=jinja2.DebugUndefined\n)\n</code></pre>"},{"location":"deep_dive/error_handling/#common-troubleshooting-steps","title":"Common Troubleshooting Steps","text":"<ol> <li>Schema Issues</li> <li>Verify all field types are valid</li> <li>Check for typos in table and column names</li> <li> <p>Ensure foreign keys reference existing tables</p> </li> <li> <p>Data Quality Issues</p> </li> <li>Refine prompts to improve generated content</li> <li>Implement custom generators for complex fields</li> <li> <p>Use custom post-processors to validate and fix data</p> </li> <li> <p>Performance Issues</p> </li> <li>Reduce batch sizes for complex schemas</li> <li>Use lower-cost models for initial development</li> <li> <p>Parallelize generation of independent tables</p> </li> <li> <p>Template Issues</p> </li> <li>Validate templates with test data before full generation</li> <li>Use conditional checks in templates for optional fields</li> <li>Implement proper error handling in custom generators</li> </ol>"},{"location":"deep_dive/error_handling/#best-practices-for-error-prevention","title":"Best Practices for Error Prevention","text":"<ol> <li>Start Small: Begin with simple schemas and gradually add complexity</li> <li>Test Thoroughly: Test each schema separately before combining</li> <li>Use Version Control: Track changes to schemas and templates</li> <li>Implement Logging: Enable detailed logging during development</li> <li>Validate Early: Validate schemas before attempting generation</li> <li>Document Assumptions: Document expected data formats and relationships</li> </ol>"},{"location":"deep_dive/foreign_keys/","title":"Foreign Key Handling","text":"<p>One of SYDA's most powerful features is its ability to maintain referential integrity across multiple related tables. This document explains in detail how foreign key relationships are defined, detected, and handled during data generation.</p>"},{"location":"deep_dive/foreign_keys/#foreign-key-definition-methods","title":"Foreign Key Definition Methods","text":"<p>SYDA supports three different ways to define foreign key relationships:</p>"},{"location":"deep_dive/foreign_keys/#1-special-__foreign_keys__-section","title":"1. Special <code>__foreign_keys__</code> Section","text":"<p>You can explicitly define foreign keys using a special <code>__foreign_keys__</code> section in your schema:</p> <pre><code># order.yaml\nid:\n  type: integer\n  primary_key: true\ncustomer_id:\n  type: integer\norder_date:\n  type: date\n\n__foreign_keys__:\n  customer_id: [Customer, id]\n</code></pre>"},{"location":"deep_dive/foreign_keys/#2-field-level-references-property","title":"2. Field-Level <code>references</code> Property","text":"<p>You can define foreign keys directly in field definitions using the <code>references</code> property:</p> <pre><code># orderitem.yaml\nid:\n  type: integer\n  primary_key: true\norder_id:\n  type: integer\n  references:\n    schema: Order\n    field: id\nproduct_id:\n  type: integer\n  references:\n    schema: Product\n    field: id\nquantity:\n  type: integer\n</code></pre> <p>This approach keeps the foreign key definition close to the field it applies to, making the schema more readable.</p>"},{"location":"deep_dive/foreign_keys/#3-sqlalchemy-foreignkey-definitions","title":"3. SQLAlchemy <code>ForeignKey</code> Definitions","text":"<p>When using SQLAlchemy models, foreign keys are automatically detected from the <code>ForeignKey</code> definitions:</p> <pre><code>from sqlalchemy import Column, Integer, String, Date, ForeignKey\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\nclass Order(Base):\n    __tablename__ = 'orders'\n\n    id = Column(Integer, primary_key=True)\n    customer_id = Column(Integer, ForeignKey('customers.id'))\n    order_date = Column(Date)\n</code></pre> <p>SYDA will automatically extract these relationships during schema analysis.</p>"},{"location":"deep_dive/foreign_keys/#dependency-resolution","title":"Dependency Resolution","text":"<p>Once foreign keys are defined, SYDA automatically determines the correct order for generating data:</p> <ol> <li>Dependency Graph: SYDA builds a directed graph of dependencies between tables</li> <li>Topological Sort: It performs a topological sort to determine the generation order</li> <li>Execution Order: Tables are generated in an order that ensures all parent tables exist first</li> </ol> <p>For example, with these tables:</p> <ul> <li> <p>Customer (no dependencies)</p> </li> <li> <p>Product (no dependencies)</p> </li> <li> <p>Order (depends on Customer)</p> </li> <li> <p>OrderItem (depends on Order and Product)</p> </li> </ul> <p>SYDA would generate them in this order:</p> <ol> <li> <p>Customer and Product (can be generated in parallel)</p> </li> <li> <p>Order (after Customer is available)</p> </li> <li> <p>OrderItem (after both Order and Product are available)</p> </li> </ol>"},{"location":"deep_dive/foreign_keys/#foreign-key-value-assignment","title":"Foreign Key Value Assignment","text":"<p>When generating data with foreign keys, SYDA ensures that each foreign key references a valid primary key in the parent table:</p> <ol> <li>Parent Table Access: SYDA maintains access to all previously generated tables</li> <li>Random Selection: By default, it randomly selects a valid foreign key value</li> <li>Consistent Foreign Keys: When multiple columns in the same schema reference the same parent table, SYDA ensures they get the same parent record for consistency</li> </ol>"},{"location":"deep_dive/foreign_keys/#best-practices-for-foreign-key-handling","title":"Best Practices for Foreign Key Handling","text":"<ol> <li>Be Explicit: Whenever possible, explicitly define foreign key relationships</li> <li>Consistent Naming: Use consistent naming patterns (e.g., <code>table_id</code>) for foreign keys</li> <li>Handle Nullable Keys: Specify whether foreign keys can be null</li> <li>Test Relationships: Verify that generated data maintains proper referential integrity</li> <li>Document Dependencies: Add comments or documentation about table dependencies</li> </ol>"},{"location":"deep_dive/foreign_keys/#examples","title":"Examples","text":"<p>To see foreign key relationships in action, explore the example projects included with SYDA:</p> <ol> <li>SQLAlchemy Examples: Check sqlalchemy_models for examples of foreign keys with SQLAlchemy models</li> <li>Dictionary Schema Examples: See Dictionary Examples for dictionary-based foreign key handling</li> <li>YAML/JSON Schema Examples: The YAML Examples and JSON Examples  demonstrate foreign keys in file-based schemas</li> <li>Retail Example: Retail Example shows foreign keys connecting multiple related tables</li> </ol> <p>Each example demonstrates different aspects of foreign key handling, including relationship definition, value assignment, and referential integrity verification.</p>"},{"location":"deep_dive/model_configuration/","title":"Model Selection and Configuration","text":"<p>SYDA supports multiple large language model (LLM) providers, allowing you to choose the model that best fits your needs in terms of capabilities, cost, and performance.</p>"},{"location":"deep_dive/model_configuration/#basic-configuration","title":"Basic Configuration","text":"<p>The <code>ModelConfig</code> class is used to specify which LLM provider and model you want to use:</p> <pre><code>from syda import SyntheticDataGenerator, ModelConfig\n\n# Basic configuration with default parameters\nconfig = ModelConfig(\n    provider=\"anthropic\",  # Choose provider: 'anthropic' or 'openai'\n    model_name=\"claude-3-5-haiku-20241022\"  # Specify model name\n)\n\n# Initialize generator with this configuration\ngenerator = SyntheticDataGenerator(model_config=config)\n</code></pre>"},{"location":"deep_dive/model_configuration/#using-different-model-providers","title":"Using Different Model Providers","text":"<p>SYDA currently supports two main LLM providers:</p>"},{"location":"deep_dive/model_configuration/#anthropic-claude-models","title":"Anthropic Claude Models","text":"<p>Claude is the default model provider for SYDA, offering strong performance for data generation tasks:</p> <pre><code># Using Anthropic Claude\nconfig = ModelConfig(\n    provider=\"anthropic\",\n    model_name=\"claude-3-5-haiku-20241022\",  # Default model\n    temperature=0.5,  # Control randomness (0.0-1.0)\n    max_tokens=4000   # Maximum number of tokens to generate\n)\n</code></pre> <p>Available Claude models include: - <code>claude-3-5-haiku-20241022</code> (default) - Fastest model, good balance of quality and cost - <code>claude-3-opus-20240229</code> - Highest quality model, but slower and more expensive - <code>claude-3-sonnet-20240229</code> - Mid-tier model with good balance of capabilities - <code>claude-3-haiku-20240307</code> - Previous haiku model version</p>"},{"location":"deep_dive/model_configuration/#openai-models","title":"OpenAI Models","text":"<p>SYDA also supports OpenAI's GPT models:</p> <pre><code># Using OpenAI GPT\nconfig = ModelConfig(\n    provider=\"openai\",\n    model_name=\"gpt-4-turbo\",  # Recommended OpenAI model\n    temperature=0.7,\n    max_tokens=4000\n)\n</code></pre> <p>Available OpenAI models include: - <code>gpt-4-turbo</code> (recommended) - Best balance of quality and cost for OpenAI - <code>gpt-4o</code> - Newest model with strong capabilities - <code>gpt-3.5-turbo</code> - Faster and cheaper, but less capable</p>"},{"location":"deep_dive/model_configuration/#model-parameters","title":"Model Parameters","text":"<p>You can fine-tune model behavior with these parameters:</p> Parameter Description Range Default <code>temperature</code> Controls randomness in generation 0.0-1.0 0.7 <code>max_tokens</code> Maximum tokens to generate Integer 4000"},{"location":"deep_dive/model_configuration/#temperature","title":"Temperature","text":"<p>The <code>temperature</code> parameter controls randomness in the model's output:</p> <ul> <li>Lower values (0.1-0.4): More deterministic, focused results</li> <li>Medium values (0.5-0.7): Good balance of creativity and coherence (recommended)</li> <li>Higher values (0.8-1.0): More creative but potentially less coherent</li> </ul>"},{"location":"deep_dive/model_configuration/#maximum-tokens","title":"Maximum Tokens","text":"<p>The <code>max_tokens</code> parameter limits the size of the model's response:</p> <pre><code># For larger datasets or complex schemas\nconfig = ModelConfig(\n    provider=\"anthropic\",\n    model_name=\"claude-3-5-haiku-20241022\",\n    max_tokens=8000  # Increase token limit for complex data generation\n)\n</code></pre> <p>For most use cases, the default of 4000 tokens is sufficient. Increase this for very complex schemas or large batch generation.</p>"},{"location":"deep_dive/model_configuration/#provider-specific-optimizations","title":"Provider-Specific Optimizations","text":"<p>SYDA automatically applies provider-specific optimizations based on your configuration:</p> <ol> <li>Prompt Engineering: Different prompt structures optimized for each model</li> <li>Batch Sizing: Appropriate batch sizes for each provider</li> <li>Error Handling: Provider-specific error recovery</li> <li>Token Management: Efficient token usage based on model context limits</li> </ol>"},{"location":"deep_dive/model_configuration/#advanced-direct-access-to-llm-client","title":"Advanced: Direct Access to LLM Client","text":"<p>For advanced use cases, you can access the underlying LLM client directly:</p> <pre><code>from syda import SyntheticDataGenerator, ModelConfig\n\nconfig = ModelConfig(provider=\"anthropic\", model_name=\"claude-3-5-haiku-20241022\")\ngenerator = SyntheticDataGenerator(model_config=config)\n\n# Access the underlying client\nllm_client = generator.llm_client\n\n# Use the client directly (provider-specific)\nif config.provider == \"anthropic\":\n    response = llm_client.messages.create(\n        model=config.model_name,\n        max_tokens=1000,\n        messages=[{\"role\": \"user\", \"content\": \"Generate a list of book titles about AI\"}]\n    )\n\n    print(response.content[0].text)\n</code></pre> <p>This gives you direct access to provider-specific features while still using SYDA for schema management.</p>"},{"location":"deep_dive/model_configuration/#best-practices","title":"Best Practices","text":"<ol> <li>Start with Default Models: Begin with <code>claude-3-5-haiku-20241022</code> (Anthropic) or <code>gpt-4-turbo</code> (OpenAI)</li> <li>Adjust Temperature: Lower for more consistent results, higher for more variety</li> <li>Consider Cost vs. Quality: Higher-end models provide better quality but at higher cost</li> <li>Test Different Models: Compare results from different models for your specific use case</li> <li>Handle API Rate Limits: Implement appropriate backoff strategies for large generations</li> </ol>"},{"location":"deep_dive/output_options/","title":"Output Options","text":"<p>SYDA offers flexible options for handling the output of generated data, allowing you to save results in various formats and locations.</p>"},{"location":"deep_dive/output_options/#return-types","title":"Return Types","text":"<p>By default, SYDA returns generated data as pandas DataFrames:</p> <pre><code>from syda import SyntheticDataGenerator, ModelConfig\n\nconfig = ModelConfig(provider=\"anthropic\", model_name=\"claude-3-5-haiku-20241022\")\ngenerator = SyntheticDataGenerator(model_config=config)\n\n# Generate data\nresults = generator.generate_for_schemas(\n    schemas={...},\n    sample_sizes={\"Customer\": 10}\n)\n\n# Results is a dictionary of DataFrames\ncustomer_df = results[\"Customer\"]\n\n# Work with the DataFrame\nprint(f\"Generated {len(customer_df)} customer records\")\nprint(customer_df.head())\n</code></pre> <p>The returned <code>results</code> dictionary maps table names to pandas DataFrames, making it easy to analyze, transform, or further process the generated data.</p>"},{"location":"deep_dive/output_options/#saving-to-files","title":"Saving to Files","text":"<p>You can save generated data to files by specifying an output directory:</p> <pre><code>results = generator.generate_for_schemas(\n    schemas={...},\n    sample_sizes={\"Customer\": 10, \"Order\": 25},\n    output_dir=\"output/crm_data\"\n)\n</code></pre> <p>When you provide an <code>output_dir</code>:</p> <ol> <li>SYDA creates the directory if it doesn't exist</li> <li>Each table's data is saved as a CSV file (e.g., <code>Customer.csv</code>, <code>Order.csv</code>)</li> <li>The results dictionary still contains the DataFrames for immediate use</li> </ol>"},{"location":"deep_dive/output_options/#output-formats","title":"Output Formats","text":"<p>By default, SYDA saves data in CSV format, but you can specify other formats using the <code>output_formats</code> parameter:</p> <pre><code>results = generator.generate_for_schemas(\n    schemas={...},\n    sample_sizes={\"Customer\": 10, \"Order\": 25},\n    output_dir=\"output/crm_data\",\n    output_formats=[\"csv\", \"json\", \"parquet\"]\n)\n</code></pre> <p>Supported output formats include:</p> <ul> <li><code>csv</code>: Standard comma-separated values format</li> <li><code>json</code>: JSON format with records orientation</li> <li><code>parquet</code>: Apache Parquet format (efficient columnar storage)</li> <li><code>xlsx</code>: Excel spreadsheet format</li> </ul>"},{"location":"deep_dive/output_options/#document-output","title":"Document Output","text":"<p>When generating unstructured documents alongside structured data, SYDA saves the documents in their specified formats:</p> <pre><code>schemas = {\n    'Report': {\n        '__template__': 'templates/report.html',\n        '__template_source__': 'file',\n        '__input_file_type__': 'html',\n        '__output_file_type__': 'pdf',\n        # ...other fields\n    }\n}\n\nresults = generator.generate_for_schemas(\n    schemas=schemas,\n    sample_sizes={\"Report\": 5},\n    output_dir=\"output/reports\"\n)\n</code></pre> <p>This creates: - <code>Report.csv</code> - Structured data about the reports - A <code>Report</code> subdirectory with the generated documents (e.g., <code>Report_1.pdf</code>, <code>Report_2.pdf</code>, etc.)</p>"},{"location":"deep_dive/output_options/#output-directory-structure","title":"Output Directory Structure","text":"<p>When using both structured data and document generation, SYDA creates an organized directory structure:</p> <pre><code>output/\n\u251c\u2500\u2500 Customer.csv\n\u251c\u2500\u2500 Order.csv\n\u251c\u2500\u2500 OrderItem.csv\n\u251c\u2500\u2500 Invoice/\n\u2502   \u251c\u2500\u2500 Invoice_1.pdf\n\u2502   \u251c\u2500\u2500 Invoice_2.pdf\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 Report/\n    \u251c\u2500\u2500 Report_1.pdf\n    \u251c\u2500\u2500 Report_2.pdf\n    \u2514\u2500\u2500 ...\n</code></pre> <p>This structure makes it easy to locate and manage both structured data and generated documents.</p>"},{"location":"deep_dive/output_options/#custom-output-file-names","title":"Custom Output File Names","text":"<p>For document outputs, you can customize the file naming pattern:</p> <pre><code>schemas = {\n    'Invoice': {\n        '__template__': 'templates/invoice.html',\n        '__template_source__': 'file',\n        '__input_file_type__': 'html',\n        '__output_file_type__': 'pdf',\n        '__output_filename_pattern__': 'INV-{id}-{customer_name}',\n        # ...other fields\n    }\n}\n</code></pre> <p>This would create files like <code>INV-1-Acme_Corp.pdf</code> instead of the default <code>Invoice_1.pdf</code>.</p>"},{"location":"deep_dive/output_options/#working-with-output-programmatically","title":"Working with Output Programmatically","text":"<p>After generation, you can further process or transform the output data:</p> <pre><code># Generate data\nresults = generator.generate_for_schemas(\n    schemas={...},\n    sample_sizes={\"Customer\": 10, \"Order\": 25}\n)\n\n# Process Customer data\ncustomers = results[\"Customer\"]\nvip_customers = customers[customers[\"annual_revenue\"] &gt; 1000000]\n\n# Process Order data\norders = results[\"Order\"]\nrecent_orders = orders[orders[\"order_date\"] &gt; \"2023-01-01\"]\n\n# Join data for analysis\nmerged = orders.merge(customers, left_on=\"customer_id\", right_on=\"id\")\n</code></pre>"},{"location":"deep_dive/output_options/#best-practices","title":"Best Practices","text":"<ol> <li>Use Descriptive Output Directories: Create meaningful directory names for your output</li> <li>Choose Appropriate Formats: Select output formats based on your downstream needs</li> <li>Process DataFrames Before Saving: Apply transformations before writing to disk when needed</li> <li>Check Output Size: Be mindful of output size for large generations</li> <li>Backup Results: Keep the returned DataFrames for immediate use even when saving to disk</li> </ol>"},{"location":"deep_dive/unstructured_documents/","title":"Unstructured Document Generation","text":"<p>SYDA provides powerful capabilities for generating unstructured documents alongside structured data. This approach allows you to create realistic documents like invoices, contracts, reports, and more based on the structured data you generate.</p>"},{"location":"deep_dive/unstructured_documents/#document-template-basics","title":"Document Template Basics","text":"<p>Document generation in SYDA is based on templates. You define a template that includes both static content and dynamic placeholders, which SYDA will fill with generated data.</p>"},{"location":"deep_dive/unstructured_documents/#key-template-attributes","title":"Key template attributes:","text":"<p>To generate documents, your schema must include special template attributes. </p> Attribute Description Example <code>__template__</code> Whether this schema is a template <code>true</code> <code>__description__</code> Human-readable description of the template <code>Retail receipt template</code> <code>__name__</code> Name of the template <code>Receipt</code> <code>__depends_on__</code> Other schemas this template depends on <code>[Product, Transaction, Customer]</code> <code>__foreign_keys__</code> Field-level foreign key relationships <code>customer_name: [Customer, first_name]</code> <code>__template_source__</code> Path to the template file <code>templates/receipt.html</code> <code>__input_file_type__</code> Template format <code>html</code> <code>__output_file_type__</code> Output document format <code>pdf</code> <p>Here's an example using YAML format:</p> <pre><code># receipt.yml\n__template__: true\n__description__: Retail receipt template\n__name__: Receipt\n__depends_on__: [Product, Transaction, Customer]\n__foreign_keys__:\n  customer_name: [Customer, first_name]\n  customer_id: [Customer, id]\n\n__template_source__: templates/receipt.html\n__input_file_type__: html\n__output_file_type__: pdf\n\n# Regular schema fields\nstore_name:\n  type: string\n  length: 50\n  description: Name of the retail store\n\nstore_address:\n  type: address\n  length: 150\n  description: Full address of the store\n\nstore_phone:\n  type: string\n  length: 20\n  description: Store phone number\n\nreceipt_number:\n  type: string\n  length: 12\n  description: Unique receipt identifier\n\nitems:\n  type: array\n  description: List of purchased items with product details\n</code></pre> <p>Here's an example using SqlAlchemy model:</p>"},{"location":"deep_dive/unstructured_documents/#sqlalchemy-model-based-templates","title":"SQLAlchemy Model-Based Templates","text":"<p>When using SQLAlchemy models, you can define template attributes directly as class attributes:</p> <pre><code>import os\nfrom sqlalchemy import Column, Integer, String, Float, Text, Date, ForeignKey\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\ntemplates_dir = os.path.join(os.path.dirname(__file__), 'templates')\n\nclass ContractDocument(Base):\n    \"\"\"Contract document for a won opportunity.\"\"\"\n    # Special metadata attributes\n    __tablename__ = 'contract_documents'\n    __depends_on__ = ['opportunities']\n\n    # Template configuration as class attributes\n    __template__ = True\n    __template_source__ = os.path.join(templates_dir, 'contract.html')\n    __input_file_type__ = 'html'\n    __output_file_type__ = 'pdf'\n\n    id = Column(Integer, primary_key=True)\n    opportunity_id = Column(Integer, ForeignKey('opportunities.id'), nullable=False)\n    effective_date = Column(Date)\n    expiration_date = Column(Date)\n    contract_number = Column(String(50))\n    customer_name = Column(String(100), ForeignKey('customers.name'))\n    customer_address = Column(String(200), ForeignKey('customers.address'))\n    service_description = Column(Text)\n    payment_terms = Column(Text)\n    contract_value = Column(Float, ForeignKey('opportunities.value'))\n    renewal_terms = Column(Text)\n</code></pre>"},{"location":"deep_dive/unstructured_documents/#supported-template-formats","title":"Supported Template Formats","text":"<p>As of now SYDA supports HTML templates(Jinja2) for unstructured document generation.</p>"},{"location":"deep_dive/unstructured_documents/#html-templatesjinja2","title":"HTML Templates(Jinja2)","text":"<p>HTML Jinja2 templates provide the most flexibility and control over document formatting:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Receipt #{{ receipt_number }}&lt;/title&gt;\n    &lt;style&gt;\n        body { font-family: Arial, sans-serif; margin: 2cm; }\n        .header { text-align: center; margin-bottom: 2em; }\n        .receipt-details { margin-bottom: 2em; }\n        .line-items { width: 100%; border-collapse: collapse; }\n        .line-items th, .line-items td { border: 1px solid #ddd; padding: 8px; }\n        .total { margin-top: 2em; text-align: right; font-weight: bold; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"header\"&gt;\n        &lt;h1&gt;{{ store_name }}&lt;/h1&gt;\n        &lt;p&gt;{{ store_address }}&lt;/p&gt;\n        &lt;p&gt;{{ store_phone }}&lt;/p&gt;\n        &lt;p&gt;{{ store_website }}&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"receipt-details\"&gt;\n        &lt;p&gt;&lt;strong&gt;Receipt Number:&lt;/strong&gt; {{ receipt_number }}&lt;/p&gt;\n        &lt;p&gt;&lt;strong&gt;Date:&lt;/strong&gt; {{ transaction_date }}&lt;/p&gt;\n        &lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; {{ transaction_time }}&lt;/p&gt;\n        &lt;p&gt;&lt;strong&gt;Customer:&lt;/strong&gt; {{ customer_name }}&lt;/p&gt;\n        &lt;p&gt;&lt;strong&gt;Customer ID:&lt;/strong&gt; {{ customer_id }}&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;table class=\"line-items\"&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th&gt;Item&lt;/th&gt;\n                &lt;th&gt;Quantity&lt;/th&gt;\n                &lt;th&gt;Unit Price&lt;/th&gt;\n                &lt;th&gt;Total&lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            {% if items %}\n                {% for item in items %}\n                &lt;tr&gt;\n                    &lt;td&gt;{{ item.name }}&lt;/td&gt;\n                    &lt;td&gt;{{ item.quantity }}&lt;/td&gt;\n                    &lt;td&gt;${{ item.price }}&lt;/td&gt;\n                    &lt;td&gt;${{ item.total }}&lt;/td&gt;\n                &lt;/tr&gt;\n                {% endfor %}\n            {% else %}\n                &lt;tr&gt;&lt;td colspan=\"4\"&gt;No items&lt;/td&gt;&lt;/tr&gt;\n            {% endif %}\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n\n    &lt;div class=\"total\"&gt;\n        &lt;p&gt;Subtotal: ${{ subtotal }}&lt;/p&gt;\n        &lt;p&gt;Tax ({{ tax_rate }}%): ${{ tax_amount }}&lt;/p&gt;\n        &lt;p&gt;Discount: ${{ discount_amount }}&lt;/p&gt;\n        &lt;p&gt;&lt;strong&gt;Total Amount: ${{ total }}&lt;/strong&gt;&lt;/p&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"deep_dive/unstructured_documents/#template-design","title":"Template Design","text":"<p>SYDA uses Jinja2 for template rendering, providing powerful features for creating dynamic documents:</p>"},{"location":"deep_dive/unstructured_documents/#variables","title":"Variables","text":"<p>Access any field from your schema directly:</p> <pre><code>Customer: {{ customer_name }}\nInvoice Number: {{ id }}\nAmount Due: ${{ total_amount }}\n</code></pre>"},{"location":"deep_dive/unstructured_documents/#loops","title":"Loops","text":"<p>Iterate over arrays or lists of items:</p> <pre><code>&lt;table&gt;\n    &lt;tr&gt;&lt;th&gt;Item&lt;/th&gt;&lt;th&gt;Price&lt;/th&gt;&lt;/tr&gt;\n    {% for item in items %}\n    &lt;tr&gt;\n        &lt;td&gt;{{ item.name }}&lt;/td&gt;\n        &lt;td&gt;${{ item.price }}&lt;/td&gt;\n    &lt;/tr&gt;\n    {% endfor %}\n&lt;/table&gt;\n</code></pre>"},{"location":"deep_dive/unstructured_documents/#conditionals","title":"Conditionals","text":"<p>Show or hide content based on conditions:</p> <pre><code>{% if total_amount &gt; 1000 %}\n&lt;div class=\"premium-customer\"&gt;\n    Thank you for your substantial order! You qualify for our premium support.\n&lt;/div&gt;\n{% elif total_amount &gt; 500 %}\n&lt;div class=\"valued-customer\"&gt;\n    Thank you for your order! You qualify for priority shipping.\n&lt;/div&gt;\n{% else %}\n&lt;div class=\"standard-customer\"&gt;\n    Thank you for your order!\n&lt;/div&gt;\n{% endif %}\n</code></pre>"},{"location":"deep_dive/unstructured_documents/#filters","title":"Filters","text":"<p>Transform data during rendering:</p> <pre><code>Date: {{ issue_date | date_format('%B %d, %Y') }}\nName: {{ customer_name | upper }}\nSummary: {{ description | truncate(100) }}\n</code></pre>"},{"location":"deep_dive/unstructured_documents/#jinja2-template-syntax-requirements","title":"Jinja2 Template Syntax Requirements","text":"<p>SYDA uses Jinja2 for template rendering. Be sure to follow these syntax requirements:</p> <ul> <li>Use <code>{{ variable }}</code> for variable interpolation (with spaces inside the braces)</li> <li>Use <code>{% for item in items %}...{% endfor %}</code> for loops</li> <li>Use <code>{% if condition %}...{% endif %}</code> for conditionals</li> <li>Use <code>{# This is a comment #}</code> for comments</li> <li>Use <code>{{ variable | filter }}</code> for applying filters</li> </ul> <p>Important: Do not use Handlebars-style syntax (e.g., <code>{{variable}}</code> without spaces or <code>{{\\#each items}}</code>) as these won't be processed correctly.</p>"},{"location":"deep_dive/unstructured_documents/#example-of-correct-jinja2-syntax","title":"Example of Correct Jinja2 Syntax:","text":"<pre><code>&lt;div class=\"items\"&gt;\n\n    &lt;p&gt;No items purchased&lt;/p&gt;\n\n&lt;/div&gt;\n</code></pre>"},{"location":"deep_dive/unstructured_documents/#pdf-generation","title":"PDF Generation","text":"<p>SYDA can automatically convert HTML and Markdown templates to PDF documents:</p> <pre><code>schemas = {\n    'Contract': {\n        '__template__': 'templates/contract.html',\n        '__template_source__': 'file',\n        '__input_file_type__': 'html',\n        '__output_file_type__': 'pdf',  # Generate PDF output\n\n        'id': {'type': 'integer', 'primary_key': True},\n        'client_name': {'type': 'string'},\n        'start_date': {'type': 'date'},\n        'end_date': {'type': 'date'},\n        'contract_terms': {'type': 'string', 'format': 'long_text'}\n    }\n}\n\nresults = generator.generate_for_schemas(\n    schemas=schemas,\n    sample_sizes={'Contract': 5},\n    output_dir='output/contracts'\n)\n</code></pre> <p>This will generate a <code>Contract</code> directory containing PDF files (e.g., <code>Contract_1.pdf</code>, <code>Contract_2.pdf</code>, etc.)</p>"},{"location":"deep_dive/unstructured_documents/#best-practices","title":"Best Practices","text":"<ol> <li>Use HTML for Complex Layouts: HTML provides the most control over document appearance</li> <li>Test Templates Separately: Validate templates with sample data before full generation</li> <li>Include CSS in HTML Templates: Embed CSS for consistent styling in PDF output</li> <li>Use Loops for Repetitive Content: Generate tables, lists, and repeated sections efficiently</li> <li>Handle Optional Fields: Use conditionals or defaults for fields that might be missing</li> <li>Consider Page Breaks: For multi-page documents, control page breaks with CSS</li> <li>Document Variable Names: Comment your templates to document expected variables</li> </ol>"},{"location":"deep_dive/unstructured_documents/#examples","title":"Examples","text":"<p>To see unstructured document generation in action, explore  SQLAlchemy Example and Yaml Example </p>"},{"location":"examples/miscellaneous/","title":"Miscellaneous Examples","text":"<p>This page provides links to additional examples that showcase various features and use cases of SYDA beyond the main documented examples.</p>"},{"location":"examples/miscellaneous/#github-examples-repository","title":"GitHub Examples Repository","text":"<p>For a complete collection of examples, please visit the SYDA GitHub examples directory.</p>"},{"location":"examples/miscellaneous/#contributing-examples","title":"Contributing Examples","text":"<p>We welcome contributions of new examples! If you've created an interesting use case or implementation with SYDA, please consider submitting it to our GitHub repository.</p> <p>For the most up-to-date and complete collection of examples, always refer to the official GitHub repository.</p>"},{"location":"examples/model_selection/anthropic/","title":"Using Anthropic Models with SYDA","text":"<p>Source code: examples/model_selection/test_claude_models.py</p> <p>This example demonstrates how to use Anthropic's Claude models with SYDA for synthetic data generation. Anthropic offers several Claude models with different capabilities, token limits, and price points.</p>"},{"location":"examples/model_selection/anthropic/#prerequisites","title":"Prerequisites","text":"<p>Before running this example, you need to:</p> <ol> <li>Install SYDA and its dependencies</li> <li>Set up your Anthropic API key in your environment</li> </ol> <p>You can set the API key in your <code>.env</code> file:</p> <pre><code>ANTHROPIC_API_KEY=your_api_key_here\n</code></pre> <p>Or set it as an environment variable before running your script:</p> <pre><code>export ANTHROPIC_API_KEY=your_api_key_here\n</code></pre>"},{"location":"examples/model_selection/anthropic/#example-code","title":"Example Code","text":"<p>The following example demonstrates how to configure and use different Claude models for synthetic data generation:</p> <pre><code>from syda.generate import SyntheticDataGenerator\nfrom syda.schemas import ModelConfig\nimport os\nfrom dotenv import load_dotenv\n\n# Load environment variables\nload_dotenv()\n\n# Define schema for a single table\nschemas = {\n    'Patient': {\n        'patient_id': {'type': 'number', 'description': 'Unique identifier for the patient'},\n        'diagnosis_code': {'type': 'text', 'description': 'ICD-10 diagnosis code'},\n        'email': {'type': 'email', 'description': 'Patient email address used for communication'},\n        'visit_date': {'type': 'date', 'description': 'Date when the patient visited the clinic'},\n        'notes': {'type': 'text', 'description': 'Clinical notes for the patient visit'}\n    },\n    'Claim': {\n        'claim_id': {'type': 'number', 'description': 'Unique identifier for the claim'},\n        'patient_id': {'type': 'foreign_key', 'description': 'Reference to the patient who made the claim', 'references': {'schema': 'Patient', 'field': 'patient_id'}},\n        'diagnosis_code': {'type': 'text', 'description': 'ICD-10 diagnosis code'},\n        'email':    {'type': 'email', 'description': 'Patient email address used for communication'},\n        'visit_date': {'type': 'date', 'description': 'Date when the patient visited the clinic'},\n        'notes': {'type': 'text', 'description': 'Clinical notes for the patient visit'}\n    }\n}\n\nprompts={\n    'Patient': 'Generate realistic synthetic patient records with ICD-10 diagnosis codes, emails, visit dates, and clinical notes.', \n    'Claim': 'Generate realistic synthetic claim records with ICD-10 diagnosis codes, emails, visit dates, and clinical notes.'\n}\nsample_sizes={'Patient': 15, 'Claim': 15}\n\nprint(\"--------------Testing Claude Haiku----------------\")\nmodel_config = ModelConfig(\n    provider=\"anthropic\",\n    model_name=\"claude-3-5-haiku-20241022\",\n    temperature=0.7,\n    max_tokens=8192  # Larger value for more complete responses\n)\n\ngenerator = SyntheticDataGenerator(model_config=model_config)\n # Define output directory\noutput_dir = os.path.join(\n        os.path.dirname(os.path.abspath(__file__)), \n        \"output\", \n        \"test_claude_models\", \n        \"haiku-3-5\"\n)\n# Generate and save to CSV\nresults = generator.generate_for_schemas(\n    schemas=schemas,\n    prompts=prompts,\n    sample_sizes=sample_sizes,\n    output_dir=output_dir\n)\nprint(f\"Data saved to {output_dir}\")\n\n\nprint(\"--------------Testing Claude Sonnet----------------\")\nmodel_config = ModelConfig(\n    provider=\"anthropic\",\n    model_name=\"claude-sonnet-4-20250514\",\n    temperature=0.7,\n    max_tokens=64000  # Larger value for more complete responses\n)\n\ngenerator = SyntheticDataGenerator(model_config=model_config)\n # Define output directory\noutput_dir = os.path.join(\n        os.path.dirname(os.path.abspath(__file__)), \n        \"output\", \n        \"test_claude_models\", \n        \"sonnet-4\"\n)\nsample_sizes={'Patient': 100, 'Claim': 200}\n# Generate and save to CSV\nresults = generator.generate_for_schemas(\n    schemas=schemas,\n    prompts=prompts,\n    sample_sizes=sample_sizes,\n    output_dir=output_dir\n)\nprint(f\"Data saved to {output_dir}\")\n\nprint(\"--------------Testing Claude Opus----------------\")\nmodel_config = ModelConfig(\n    provider=\"anthropic\",\n    model_name=\"claude-opus-4-20250514\",\n    temperature=0.7,\n    max_tokens=32000  # Larger value for more complete responses\n)\n\ngenerator = SyntheticDataGenerator(model_config=model_config)\n# Define output directory\noutput_dir = os.path.join(\n        os.path.dirname(os.path.abspath(__file__)), \n        \"output\", \n        \"test_claude_models\", \n        \"opus-4\"\n)\n# Generate and save to CSV\nresults = generator.generate_for_schemas(\n    schemas=schemas,\n    prompts=prompts,\n    sample_sizes=sample_sizes,\n    output_dir=output_dir\n)\nprint(f\"Data saved to {output_dir}\")\n</code></pre>"},{"location":"examples/model_selection/anthropic/#sample-outputs","title":"Sample Outputs","text":"<p>You can view sample outputs generated by these Claude models here: examples/model_selection/output/test_claude_models</p>"},{"location":"examples/model_selection/anthropic/#claude-model-options","title":"Claude Model Options","text":"<p>SYDA supports several Anthropic Claude models with different capabilities and token limits:</p> <ul> <li>claude-3-5-haiku-20241022: Fast and efficient for quick data generation (8,192 tokens)</li> <li>claude-sonnet-4-20250514: Balance of quality and performance (64,000 tokens)</li> <li>claude-opus-4-20250514: Highest capability for complex data (32,000 tokens)</li> </ul>"},{"location":"examples/model_selection/anthropic/#key-concepts","title":"Key Concepts","text":""},{"location":"examples/model_selection/anthropic/#model-configuration","title":"Model Configuration","text":"<p>The <code>ModelConfig</code> class is used to specify which model to use:</p> <pre><code>model_config = ModelConfig(\n    provider=\"anthropic\",\n    model_name=\"claude-3-5-haiku-20241022\",\n    temperature=0.7,\n    max_tokens=8192\n)\n</code></pre> <ul> <li>provider: Set to <code>\"anthropic\"</code> to use Claude models</li> <li>model_name: Specify which Claude model to use</li> <li>temperature: Controls randomness in generation (0.0-1.0)</li> <li>max_tokens: Maximum number of tokens in the response</li> </ul>"},{"location":"examples/model_selection/anthropic/#scaling-to-larger-datasets","title":"Scaling to Larger Datasets","text":"<p>When generating larger datasets, consider using more capable models:</p> <pre><code>sample_sizes = {'Patient': 100, 'Claim': 200}\n</code></pre> <p>The more powerful Claude models (Sonnet and Opus) can handle generating larger datasets in a single request, which is more efficient than making multiple smaller requests.</p>"},{"location":"examples/model_selection/anthropic/#output-directory-structure","title":"Output Directory Structure","text":"<p>The example code creates an organized directory structure for output files:</p> <pre><code>output/\n\u251c\u2500\u2500 test_claude_models/\n\u2502   \u251c\u2500\u2500 haiku-3-5/\n\u2502   \u2502   \u251c\u2500\u2500 Patient.csv\n\u2502   \u2502   \u2514\u2500\u2500 Claim.csv\n\u2502   \u251c\u2500\u2500 sonnet-4/\n\u2502   \u2502   \u251c\u2500\u2500 Patient.csv\n\u2502   \u2502   \u2514\u2500\u2500 Claim.csv\n\u2502   \u2514\u2500\u2500 opus-4/\n\u2502       \u251c\u2500\u2500 Patient.csv\n\u2502       \u2514\u2500\u2500 Claim.csv\n</code></pre>"},{"location":"examples/model_selection/anthropic/#best-practices","title":"Best Practices","text":"<ol> <li>Choose the right model for your task: </li> <li>Use Haiku for small datasets and simple schemas</li> <li>Use Sonnet for medium-sized datasets with moderate complexity</li> <li> <p>Use Opus for complex data structures and relationships</p> </li> <li> <p>Set appropriate token limits: Different models have different token limits. Make sure to set the <code>max_tokens</code> parameter accordingly.</p> </li> <li> <p>Use detailed prompts: Claude models respond well to specific guidance in prompts. Include details about the type of data you want to generate.</p> </li> <li> <p>Monitor API usage: Keep track of your API usage to manage costs, especially when working with larger datasets.</p> </li> </ol>"},{"location":"examples/model_selection/openai/","title":"Using OpenAI Models with SYDA","text":"<p>Source code: examples/model_selection/test_openai_models.py</p> <p>This example demonstrates how to use OpenAI's models with SYDA for synthetic data generation. OpenAI offers several models with different capabilities, token limits, and price points.</p>"},{"location":"examples/model_selection/openai/#prerequisites","title":"Prerequisites","text":"<p>Before running this example, you need to:</p> <ol> <li>Install SYDA and its dependencies</li> <li>Set up your OpenAI API key in your environment</li> </ol> <p>You can set the API key in your <code>.env</code> file:</p> <pre><code>OPENAI_API_KEY=your_api_key_here\n</code></pre> <p>Or set it as an environment variable before running your script:</p> <pre><code>export OPENAI_API_KEY=your_api_key_here\n</code></pre>"},{"location":"examples/model_selection/openai/#example-code","title":"Example Code","text":"<p>The following example demonstrates how to configure and use different OpenAI models for synthetic data generation:</p> <pre><code>from syda.generate import SyntheticDataGenerator\nfrom syda.schemas import ModelConfig\nimport os\nfrom dotenv import load_dotenv\n\n# Load environment variables\nload_dotenv()\n\n# Define schema for a single table\nschemas = {\n    'Patient': {\n        'patient_id': {'type': 'number', 'description': 'Unique identifier for the patient'},\n        'diagnosis_code': {'type': 'text', 'description': 'ICD-10 diagnosis code'},\n        'email': {'type': 'email', 'description': 'Patient email address used for communication'},\n        'visit_date': {'type': 'date', 'description': 'Date when the patient visited the clinic'},\n        'notes': {'type': 'text', 'description': 'Clinical notes for the patient visit'}\n    },\n    'Claim': {\n        'claim_id': {'type': 'number', 'description': 'Unique identifier for the claim'},\n        'patient_id': {'type': 'foreign_key', 'description': 'Reference to the patient who made the claim', 'references': {'schema': 'Patient', 'field': 'patient_id'}},\n        'diagnosis_code': {'type': 'text', 'description': 'ICD-10 diagnosis code'},\n        'email':    {'type': 'email', 'description': 'Patient email address used for communication'},\n        'visit_date': {'type': 'date', 'description': 'Date when the patient visited the clinic'},\n        'notes': {'type': 'text', 'description': 'Clinical notes for the patient visit'}\n    }\n}\n\nprompts={\n    'Patient': 'Generate realistic synthetic patient records with ICD-10 diagnosis codes, emails, visit dates, and clinical notes.', \n    'Claim': 'Generate realistic synthetic claim records with ICD-10 diagnosis codes, emails, visit dates, and clinical notes.'\n}\n\n\nprint(\"--------------Testing OpenAI GPT-4o----------------\")\nsample_sizes={'Patient': 15, 'Claim': 15}\nmodel_config = ModelConfig(\n    provider=\"openai\",\n    model_name=\"gpt-4o-2024-08-06\",\n    temperature=0.7,\n    max_completion_tokens=16000  # Larger value for more complete responses\n)\n\ngenerator = SyntheticDataGenerator(model_config=model_config)\n # Define output directory\noutput_dir = os.path.join(\n        os.path.dirname(os.path.abspath(__file__)), \n        \"output\", \n        \"test_openai_models\", \n        \"gpt-4o\"\n)\n# Generate and save to CSV\nresults = generator.generate_for_schemas(\n    schemas=schemas,\n    prompts=prompts,\n    sample_sizes=sample_sizes,\n    output_dir=output_dir\n)\nprint(f\"Data saved to {output_dir}\")\n\n\nprint(\"--------------Testing OpenAI o3----------------\")\nmodel_config = ModelConfig(\n    provider=\"openai\",\n    model_name=\"o3-2025-04-16\",\n    max_completion_tokens=100000  # Larger value for more complete responses\n)\n\ngenerator = SyntheticDataGenerator(model_config=model_config)\n # Define output directory\noutput_dir = os.path.join(\n        os.path.dirname(os.path.abspath(__file__)), \n        \"output\", \n        \"test_openai_models\", \n        \"o3\"\n)\nsample_sizes={'Patient': 100, 'Claim': 200}\n# Generate and save to CSV\nresults = generator.generate_for_schemas(\n    schemas=schemas,\n    prompts=prompts,\n    sample_sizes=sample_sizes,\n    output_dir=output_dir\n)\nprint(f\"Data saved to {output_dir}\")\n</code></pre>"},{"location":"examples/model_selection/openai/#sample-outputs","title":"Sample Outputs","text":"<p>You can view sample outputs generated by these OpenAI models here: examples/model_selection/output/test_openai_models</p>"},{"location":"examples/model_selection/openai/#openai-model-options","title":"OpenAI Model Options","text":"<p>SYDA supports several OpenAI models with different capabilities and token limits:</p> <ul> <li>gpt-4o-2024-08-06: Versatile model for general purpose data generation (16,000 tokens)</li> <li>o3-2025-04-16: Highest capability model for complex data (100,000 tokens)</li> <li>gpt-4-turbo: Balanced model for most use cases (16,000 tokens)</li> </ul>"},{"location":"examples/model_selection/openai/#key-concepts","title":"Key Concepts","text":""},{"location":"examples/model_selection/openai/#foreign-key-handling","title":"Foreign Key Handling","text":"<p>Foreign keys are crucial for maintaining referential integrity in generated data. In the example above, we're using the <code>foreign_key</code> type with explicit references:</p> <pre><code>'patient_id': {\n    'type': 'foreign_key',\n    'description': 'Reference to the patient who made the claim',\n    'references': {\n        'schema': 'Patient', \n        'field': 'patient_id'\n    }\n}\n</code></pre> <p>SYDA supports three methods for defining foreign keys: 1. Using the <code>__foreign_keys__</code> special section 2. Using field-level references with type and references properties (shown above) 3. Using type-based detection with naming conventions (field name ends with <code>_id</code>)</p>"},{"location":"examples/model_selection/openai/#model-configuration","title":"Model Configuration","text":"<p>The <code>ModelConfig</code> class is used to specify which model to use:</p> <pre><code>model_config = ModelConfig(\n    provider=\"openai\",\n    model_name=\"gpt-4o-2024-08-06\",\n    temperature=0.7,\n    max_completion_tokens=16000\n)\n</code></pre> <ul> <li>provider: Set to <code>\"openai\"</code> to use OpenAI models</li> <li>model_name: Specify which OpenAI model to use</li> <li>temperature: Controls randomness in generation (0.0-1.0)</li> <li>max_completion_tokens: Maximum number of tokens in the response</li> </ul>"},{"location":"examples/model_selection/openai/#scaling-to-larger-datasets","title":"Scaling to Larger Datasets","text":"<p>When generating larger datasets, consider using models with higher token limits:</p> <pre><code>sample_sizes = {'Patient': 100, 'Claim': 200}\n</code></pre> <p>The o3 model can handle generating larger datasets in a single request, which is more efficient than making multiple smaller requests.</p>"},{"location":"examples/model_selection/openai/#output-directory-structure","title":"Output Directory Structure","text":"<p>The example code creates an organized directory structure for output files:</p> <pre><code>output/\n\u251c\u2500\u2500 test_openai_models/\n\u2502   \u251c\u2500\u2500 gpt-4o/\n\u2502   \u2502   \u251c\u2500\u2500 Patient.csv\n\u2502   \u2502   \u2514\u2500\u2500 Claim.csv\n\u2502   \u2514\u2500\u2500 o3/\n\u2502       \u251c\u2500\u2500 Patient.csv\n\u2502       \u2514\u2500\u2500 Claim.csv\n</code></pre>"},{"location":"examples/model_selection/openai/#best-practices","title":"Best Practices","text":"<ol> <li>Choose the right model for your task: </li> <li>Use gpt-4o for balanced performance and quality</li> <li> <p>Use o3 for complex data structures and larger datasets</p> </li> <li> <p>Set appropriate token limits: Different models have different token limits. Make sure to set the <code>max_completion_tokens</code> parameter accordingly.</p> </li> <li> <p>Use detailed prompts: Include specific instructions in your prompts to get better quality synthetic data.</p> </li> <li> <p>Monitor API usage: Keep track of your API usage to manage costs, especially when working with larger datasets.</p> </li> <li> <p>Handle relationships carefully: When defining schemas with foreign keys, ensure you specify the relationships correctly for proper data generation.</p> </li> </ol>"},{"location":"examples/structured_and_unstructured_mixed/sqlalchemy_models/","title":"SQLAlchemy Models with Mixed Content","text":"<p>Source code: examples/structured_and_unstructured/crm_sqlalchemy/example_crm_templates.py</p> <p>This example demonstrates how to use SQLAlchemy models to generate both structured database data and unstructured document content for a CRM system.</p>"},{"location":"examples/structured_and_unstructured_mixed/sqlalchemy_models/#overview","title":"Overview","text":"<p>SYDA can generate both structured tabular data and unstructured document content in a single workflow. This approach is particularly valuable in business systems where documents (like proposals and contracts) need to consistently reference database records (like customers and opportunities).</p> <p>In this CRM example, we generate: - Structured data: Customers, contacts, and sales opportunities - Unstructured content: Proposal documents and contract documents as PDFs</p>"},{"location":"examples/structured_and_unstructured_mixed/sqlalchemy_models/#model-definition","title":"Model Definition","text":"<p>The CRM example uses SQLAlchemy models to define both structured database tables and document templates.</p>"},{"location":"examples/structured_and_unstructured_mixed/sqlalchemy_models/#structured-data-models","title":"Structured Data Models","text":"<p>Here are the SQLAlchemy models for the structured database tables:</p> <pre><code>class Customer(Base):\n    \"\"\"Customer organization in the CRM system.\"\"\"\n    __tablename__ = 'customers'\n\n    id = Column(Integer, primary_key=True, comment='Primary key for customer records')\n    name = Column(String(100), nullable=False, comment='Full name of the customer organization')\n    industry = Column(String(50), comment='Industry sector the customer operates in')\n    annual_revenue = Column(Float, comment='Annual revenue of the customer organization in USD')\n    employees = Column(Integer, comment='Total number of employees in the customer organization')\n    website = Column(String(100), comment='Website URL of the customer organization')\n    address = Column(String(200), comment='Physical street address of the customer headquarters')\n    city = Column(String(50), comment='City where the customer headquarters is located')\n    state = Column(String(2), comment='Two-letter state/province code')\n    zip_code = Column(String(10), comment='Postal/zip code of the customer headquarters')\n    status = Column(String(20), comment='Current status of the customer relationship (Active, Inactive, Prospect)')\n\n    # Relationships\n    contacts = relationship(\"Contact\", back_populates=\"customer\")\n    opportunities = relationship(\"Opportunity\", back_populates=\"customer\")\n\n\nclass Contact(Base):\n    \"\"\"Individual person associated with a customer.\"\"\"\n    __tablename__ = 'contacts'\n\n    id = Column(Integer, primary_key=True, comment='Primary key for contact records')\n    customer_id = Column(Integer, ForeignKey('customers.id'), nullable=False, comment='Foreign key reference to the customer this contact belongs to')\n    first_name = Column(String(50), nullable=False, comment='Contact\\'s first/given name')\n    last_name = Column(String(50), nullable=False, comment='Contact\\'s last/family name')\n    email = Column(String(100), nullable=False, unique=True, comment='Contact\\'s email address (unique across all contacts)')\n    phone = Column(String(20), comment='Contact\\'s phone number including country/area code')\n    position = Column(String(100), comment='Job title or role within the customer organization')\n    is_primary = Column(Boolean, comment='Whether this is the primary point of contact for the customer')\n\n    # Relationships\n    customer = relationship(\"Customer\", back_populates=\"contacts\")\n\n\nclass Opportunity(Base):\n    \"\"\"Sales opportunity with a customer.\"\"\"\n    __tablename__ = 'opportunities'\n\n    id = Column(Integer, primary_key=True, comment='Primary key for opportunity records')\n    customer_id = Column(Integer, ForeignKey('customers.id'), nullable=False, comment='Foreign key reference to the customer this opportunity is with')\n    name = Column(String(100), nullable=False, comment='Name or title of the sales opportunity')\n    value = Column(Float, nullable=False, comment='Estimated monetary value of the opportunity in USD')\n    stage = Column(String(20), nullable=False, comment='Current stage in the sales pipeline (Lead, Qualification, Proposal, Negotiation, Closed Won, Closed Lost)')\n    probability = Column(Float, comment='Estimated probability (0-100%) of winning the opportunity')\n    expected_close_date = Column(Date, comment='Expected date when the opportunity will be closed (won or lost)')\n    description = Column(Text, comment='Detailed description of the opportunity and customer requirements')\n\n    # Relationships\n    customer = relationship(\"Customer\", back_populates=\"opportunities\")\n</code></pre>"},{"location":"examples/structured_and_unstructured_mixed/sqlalchemy_models/#document-template-models","title":"Document Template Models","text":"<p>For generating unstructured documents (proposals and contracts), we define special SQLAlchemy models with template processing capabilities:</p> <pre><code>class ProposalDocument(Base):\n    \"\"\"Sales proposal document for an opportunity.\"\"\"\n    # Special metadata attributes\n    __tablename__ = 'proposal_documents'\n    __depends_on__ = ['opportunities']\n\n    # Template configuration as regular fields\n    __template__ = True\n    __template_source__ = os.path.join(templates_dir, 'proposal.html')\n    __input_file_type__ = 'html'\n    __output_file_type__ = 'pdf'\n\n    id = Column(Integer, primary_key=True, comment='Primary key for proposal document records')\n    opportunity_id = Column(Integer, ForeignKey('opportunities.id'), nullable=False, comment='Foreign key reference to the opportunity this proposal is for')\n    created_date = Column(Date, comment='Date when the proposal document was created')\n    title = Column(String(200), comment='Main title of the proposal document')\n    subtitle = Column(String(300), comment='Secondary title or tagline for the proposal')\n    prepared_by = Column(String(100), comment='Name of the sales representative who prepared the proposal')\n    customer_name = Column(String(100), ForeignKey('customers.name'), comment='Name of the customer organization (linked to customers table)')\n    customer_address = Column(String(200), ForeignKey('customers.address'), comment='Address of the customer organization (linked to customers table)')\n    opportunity_name = Column(String(100), ForeignKey('opportunities.name'), comment='Name of the opportunity (linked to opportunities table)')\n    opportunity_value = Column(Float, ForeignKey('opportunities.value'), comment='Value of the opportunity in USD (linked to opportunities table)')\n    opportunity_description = Column(Text, ForeignKey('opportunities.description'), comment='Description of the opportunity (linked to opportunities table)')\n    proposed_solutions = Column(Text, comment='Detailed description of the proposed solutions/products/services')\n    implementation_timeline = Column(Text, comment='Timeline for implementing the proposed solutions')\n    pricing_details = Column(Text, comment='Detailed pricing information, including breakdowns and options')\n    terms_and_conditions = Column(Text, comment='Standard terms and conditions for the proposal')\n\n\nclass ContractDocument(Base):\n    \"\"\"Contract document for a won opportunity.\"\"\"\n    # Special metadata attributes\n    __tablename__ = 'contract_documents'\n    __depends_on__ = ['opportunities']\n\n    # Template configuration as regular fields\n    __template__ = True\n    __template_source__ = os.path.join(templates_dir, 'contract.html')\n    __input_file_type__ = 'html'\n    __output_file_type__ = 'pdf'\n\n    id = Column(Integer, primary_key=True, comment='Primary key for contract document records')\n    opportunity_id = Column(Integer, ForeignKey('opportunities.id'), nullable=False, comment='Foreign key reference to the opportunity this contract is for')\n    effective_date = Column(Date, comment='Date when the contract becomes effective')\n    expiration_date = Column(Date, comment='Date when the contract expires')\n    contract_number = Column(String(50), comment='Unique identifier/number for the contract')\n    customer_name = Column(String(100), ForeignKey('customers.name'), comment='Name of the customer organization (linked to customers table)')\n    customer_address = Column(String(200), ForeignKey('customers.address'), comment='Address of the customer organization (linked to customers table)')\n    service_description = Column(Text, comment='Detailed description of services to be provided')\n    payment_terms = Column(Text, comment='Payment terms including schedule, methods and conditions')\n    contract_value = Column(Float, ForeignKey('opportunities.value'), comment='Total monetary value of the contract in USD (linked to opportunities table)')\n    renewal_terms = Column(Text, comment='Terms for contract renewal or extension')\n    legal_terms = Column(Text, comment='Legal terms and conditions including liabilities, warranties, etc.')\n    signatures = Column(Text, comment='Signature blocks for both parties')\n</code></pre>"},{"location":"examples/structured_and_unstructured_mixed/sqlalchemy_models/#template-processing-attributes","title":"Template Processing Attributes","text":"<p>For template-based document generation, SQLAlchemy models use special class attributes:</p> <ol> <li><code>__template__</code>: Set to <code>True</code> to indicate this model generates document content</li> <li><code>__template_source__</code>: Path to the HTML template file</li> <li><code>__input_file_type__</code>: Format of the source template (<code>html</code>)</li> <li><code>__output_file_type__</code>: Format of the generated document (<code>pdf</code>)</li> <li><code>__depends_on__</code>: List of other models that must be generated first</li> </ol> <p>These attributes tell SYDA to: 1. Generate structured data for this model 2. Use the template to format the data into a document 3. Convert the formatted document to PDF</p>"},{"location":"examples/structured_and_unstructured_mixed/sqlalchemy_models/#foreign-key-handling","title":"Foreign Key Handling","text":"<p>SQLAlchemy models define foreign keys explicitly through <code>ForeignKey()</code> definitions, which SYDA uses to detect relationships:</p> <pre><code>customer_id = Column(Integer, ForeignKey('customers.id'), nullable=False)\n</code></pre> <p>For template models, you can also define dependencies using the <code>__depends_on__</code> attribute:</p> <pre><code>__depends_on__ = ['opportunities']\n</code></pre> <p>This ensures that required data (like opportunities) is generated before processing templates.</p>"},{"location":"examples/structured_and_unstructured_mixed/sqlalchemy_models/#code-example","title":"Code Example","text":"<p>Here's how to use SQLAlchemy models to generate both structured data and document content:</p> <pre><code>from syda.generate import SyntheticDataGenerator\nfrom syda.schemas import ModelConfig\nimport os\nimport models  # Import SQLAlchemy model definitions\n\ndef main():\n    \"\"\"Main entry point for the example.\"\"\"\n\n    # Initialize generator with model config\n    config = ModelConfig(provider=\"anthropic\", model_name=\"claude-3-5-haiku-20241022\")\n    generator = SyntheticDataGenerator(model_config=config)\n\n    # Set up output directory\n    output_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"output\")\n    os.makedirs(output_dir, exist_ok=True)\n\n    # Generate data for all models in one call\n    results = generator.generate_for_sqlalchemy_models(\n        sqlalchemy_models=[\n            models.Customer,\n            models.Contact,\n            models.Opportunity,\n            models.ProposalDocument, \n            models.ContractDocument\n        ],\n        sample_sizes={\n            'customers': 5,\n            'contacts': 10,\n            'opportunities': 8,\n            'proposal_documents': 3,\n            'contract_documents': 2\n        },\n        prompts={\n            'customers': \"Generate a customer for the opportunity\",\n            'contacts': \"Generate a contact for the customer\",\n            'opportunities': \"Generate an opportunity for the customer\",\n            'proposal_documents': \"Generate a proposal document for the opportunity\",\n            'contract_documents': \"Generate a contract document for the opportunity\"\n        },\n        output_dir=output_dir\n    )\n\n    # Print summary of generated data\n    print(\"\\n\u2705 Data generation complete!\")\n    for model_name, df in results.items():\n        print(f\"  {model_name}: {len(df)} records\")\n</code></pre>"},{"location":"examples/structured_and_unstructured_mixed/sqlalchemy_models/#document-templates","title":"Document Templates","text":"<p>The template models reference HTML template files. Here's a simplified version of what these templates might contain:</p>"},{"location":"examples/structured_and_unstructured_mixed/sqlalchemy_models/#proposal-template","title":"Proposal Template","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;{{title}}&lt;/title&gt;\n    &lt;style&gt;\n        body { font-family: 'Arial', sans-serif; line-height: 1.6; }\n        .header { text-align: center; margin-bottom: 30px; }\n        .section { margin: 20px 0; }\n        .footer { margin-top: 50px; font-size: 0.9em; color: #666; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"header\"&gt;\n        &lt;h1&gt;{{title}}&lt;/h1&gt;\n        &lt;h2&gt;{{subtitle}}&lt;/h2&gt;\n        &lt;p&gt;Prepared by: {{prepared_by}}&lt;br&gt;\n        Created: {{created_date}}&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"section\"&gt;\n        &lt;h2&gt;Customer Information&lt;/h2&gt;\n        &lt;p&gt;\n            &lt;strong&gt;{{customer_name}}&lt;/strong&gt;&lt;br&gt;\n            {{customer_address}}\n        &lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"section\"&gt;\n        &lt;h2&gt;Opportunity: {{opportunity_name}}&lt;/h2&gt;\n        &lt;p&gt;&lt;strong&gt;Value:&lt;/strong&gt; ${{opportunity_value}}&lt;/p&gt;\n        &lt;p&gt;{{opportunity_description}}&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"section\"&gt;\n        &lt;h2&gt;Proposed Solutions&lt;/h2&gt;\n        &lt;p&gt;{{proposed_solutions}}&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"section\"&gt;\n        &lt;h2&gt;Implementation Timeline&lt;/h2&gt;\n        &lt;p&gt;{{implementation_timeline}}&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"section\"&gt;\n        &lt;h2&gt;Pricing Details&lt;/h2&gt;\n        &lt;p&gt;{{pricing_details}}&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"section\"&gt;\n        &lt;h2&gt;Terms and Conditions&lt;/h2&gt;\n        &lt;p&gt;{{terms_and_conditions}}&lt;/p&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/structured_and_unstructured_mixed/sqlalchemy_models/#key-features","title":"Key Features","text":"<ol> <li>Mixed Content Generation: Generate both structured data and document PDFs in one workflow</li> <li>Template-Based Documents: Convert structured data into formatted PDF documents</li> <li>Data Consistency: Ensure generated documents reference valid database records</li> <li>Referential Integrity: Maintain proper relationships between database tables and documents</li> <li>Dependency Management: Define which models must be generated before others</li> </ol>"},{"location":"examples/structured_and_unstructured_mixed/sqlalchemy_models/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Model Documentation: Add clear docstrings to describe each model's purpose    <pre><code>\"\"\"Sales proposal document for an opportunity.\"\"\"\n</code></pre></p> </li> <li> <p>Column Comments: Use column comments to guide data generation    <pre><code>comment='Name of the sales representative who prepared the proposal'\n</code></pre></p> </li> <li> <p>Explicit Dependencies: Define <code>__depends_on__</code> to ensure proper generation order    <pre><code>__depends_on__ = ['opportunities']\n</code></pre></p> </li> <li> <p>ForeignKey Definitions: Define explicit foreign key relationships    <pre><code>ForeignKey('opportunities.id')\n</code></pre></p> </li> <li> <p>Template Structure: Create clean HTML templates with appropriate sections and styling</p> </li> </ol>"},{"location":"examples/structured_and_unstructured_mixed/sqlalchemy_models/#sample-outputs","title":"Sample Outputs","text":"<p>You can view sample outputs generated using these SQLAlchemy models and templates here:</p> <p>Example CRM SQLAlchemy Model Outputs</p>"},{"location":"examples/structured_and_unstructured_mixed/yaml_schemas/","title":"YAML Schemas with Mixed Content","text":"<p>Source code: examples/structured_and_unstructured/retail_yml/example_retail_schemas.py</p> <p>This example demonstrates how to use YAML schemas to generate both structured data and unstructured document content for a retail application.</p>"},{"location":"examples/structured_and_unstructured_mixed/yaml_schemas/#overview","title":"Overview","text":"<p>SYDA can generate both structured tabular data and unstructured document content like PDFs in a single workflow. This approach is useful when you need to maintain consistency between your structured database records and free-form documents that reference them.</p> <p>In this retail example, we generate: - Structured data: Product categories, products, customers, and transactions - Unstructured content: Receipt documents (PDFs) that include items from transactions</p>"},{"location":"examples/structured_and_unstructured_mixed/yaml_schemas/#schema-definition","title":"Schema Definition","text":"<p>The retail example uses YAML schemas to define both structured data models and document templates. </p>"},{"location":"examples/structured_and_unstructured_mixed/yaml_schemas/#structured-data-schemas","title":"Structured Data Schemas","text":"<p>Here's an example of the structured YAML schemas:</p> <pre><code># category.yml\n__table_description__: Product categories in the retail system\nid:\n  type: number\n  description: Unique identifier for the category\n  primary_key: true\nname:\n  type: text\n  description: Category name\n  nullable: false\nparent_id:\n  type: number\n  description: Reference to parent category (if any, for hierarchical categories)\n  nullable: true\ndescription:\n  type: text\n  description: Category description\n</code></pre> <pre><code># product.yml\n__table_description__: Products available for purchase in the retail system\nid:\n  type: number\n  description: Unique identifier for the product\n  primary_key: true\nname:\n  type: text\n  description: Product name\n  nullable: false\nsku:\n  type: text\n  description: Stock keeping unit (unique product code)\n  nullable: false\ncategory_id:\n  type: number\n  description: Reference to product category\n  nullable: false\n  references: Category.id\nprice:\n  type: number\n  description: Product price in USD\n  nullable: false\ndescription:\n  type: text\n  description: Detailed product description\n</code></pre>"},{"location":"examples/structured_and_unstructured_mixed/yaml_schemas/#document-template-schema","title":"Document Template Schema","text":"<p>For generating unstructured documents (like receipts), we define a special schema with template processing capabilities:</p> <pre><code># receipt.yml\n__table_description__: Retail receipts with store details and itemized purchases\n__template__: true\n__template_source__: templates/receipt.html\n__input_file_type__: html\n__output_file_type__: pdf\n__depends_on__:\n  - Customer\n  - Transaction\n  - Product\n\nid:\n  type: number\n  description: Unique identifier for the receipt\n  primary_key: true\n\nstore_name:\n  type: text\n  description: Name of the retail store\n  nullable: false\n\nstore_address:\n  type: text\n  description: Full address of the retail store\n  nullable: false\n\ntransaction_date:\n  type: date\n  description: Date when the transaction occurred\n  nullable: false\n\ncustomer_id:\n  type: number\n  description: Reference to customer who made the purchase\n  references: Customer.id\n  nullable: true\n\ncashier:\n  type: text\n  description: Name of the cashier who processed the transaction\n  nullable: false\n\nitems:\n  type: array\n  description: List of items purchased in this transaction\n  item_fields:\n    product_name:\n      type: text\n      description: Name of the product purchased\n    sku:\n      type: text\n      description: Product SKU/code\n    quantity:\n      type: number\n      description: Quantity purchased\n    unit_price:\n      type: number\n      description: Price per unit\n    item_total:\n      type: number\n      description: Total price for this item (quantity * unit_price)\n\nsubtotal:\n  type: number\n  description: Sum of all item totals before tax and discounts\n  nullable: false\n\ntax_rate:\n  type: number\n  description: Tax rate applied as percentage (e.g. 7.5 for 7.5%)\n  nullable: false\n\ntax_amount:\n  type: number\n  description: Calculated tax amount\n  nullable: false\n\ndiscount_amount:\n  type: number\n  description: Any discounts applied to the transaction\n  nullable: false\n  default: 0.0\n\ntotal:\n  type: number\n  description: Final total including tax and discounts\n  nullable: false\n\npayment_method:\n  type: text\n  description: Method of payment (Credit, Cash, etc)\n  nullable: false\n\nnotes:\n  type: text\n  description: Any additional notes for the receipt\n  nullable: true\n</code></pre>"},{"location":"examples/structured_and_unstructured_mixed/yaml_schemas/#foreign-key-handling","title":"Foreign Key Handling","text":"<p>YAML schemas handle foreign keys through explicit references:</p> <pre><code>category_id:\n  type: number\n  description: Reference to product category\n  nullable: false\n  references: Category.id\n</code></pre> <p>Additionally, for template generation, you can specify schema dependencies using the <code>__depends_on__</code> property:</p> <pre><code>__depends_on__:\n  - Customer\n  - Transaction\n  - Product\n</code></pre> <p>This ensures that all required data is generated before processing templates.</p>"},{"location":"examples/structured_and_unstructured_mixed/yaml_schemas/#code-example","title":"Code Example","text":"<p>Here's how to use YAML schemas to generate mixed structured and unstructured data:</p> <pre><code>import os\nimport pandas as pd\nfrom syda.generate import SyntheticDataGenerator\nfrom syda.schemas import ModelConfig\n\n# Define output directory\nOUTPUT_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"output\")\nos.makedirs(OUTPUT_DIR, exist_ok=True)\n\ndef main():\n    \"\"\"Run the retail sector example.\"\"\"\n\n    # Initialize the generator with Claude\n    config = ModelConfig(provider=\"anthropic\", model=\"claude-3-haiku-20240307\")\n    generator = SyntheticDataGenerator(model_config=config)\n\n    # Define schema directory paths\n    schema_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"schemas\")\n\n    # Define paths to schema files\n    schemas = {\n        \"Category\": os.path.join(schema_dir, \"category.yml\"),\n        \"Customer\": os.path.join(schema_dir, \"customer.yml\"),\n        \"Product\": os.path.join(schema_dir, \"product.yml\"),\n        \"Transaction\": os.path.join(schema_dir, \"transaction.yml\"),\n        \"Receipt\": os.path.join(schema_dir, \"receipt.yml\")\n    }\n\n    # Define custom prompts for each schema (optional)\n    prompts = {\n        \"Category\": \"Generate retail product categories with hierarchical structure.\",\n        \"Product\": \"Generate retail products with names, SKUs, prices, and descriptions. Ensure a good variety of prices and categories.\",\n        \"Customer\": \"Generate customer records for a retail business with realistic names, addresses, and email patterns.\",\n        \"Transaction\": \"Generate retail transactions with realistic purchase patterns, payment methods, and item counts.\",\n        \"Receipt\": \"Generate data for retail receipts including store details, transaction information, and itemized purchases.\"\n    }\n\n    # Define sample sizes for each schema\n    sample_sizes = {\n        \"Category\": 5,\n        \"Product\": 25,\n        \"Customer\": 10,\n        \"Transaction\": 20,\n        \"Receipt\": 5\n    }\n\n    # Helper functions for calculated fields\n    def calculate_tax(row, col_name=None):\n        \"\"\"Calculate tax amount based on subtotal and tax rate.\"\"\"\n        return round(row[\"subtotal\"] * row[\"tax_rate\"] / 100, 2)\n\n    def calculate_total(row, col_name=None):\n        \"\"\"Calculate total from subtotal, tax, and discount.\"\"\"\n        return round(row[\"subtotal\"] + row[\"tax_amount\"] - row[\"discount_amount\"], 2)\n\n    def generate_receipt_items(row, col_name=None, parent_dfs=None):\n        \"\"\"Custom generator for the items field in receipts.\n\n        Uses the Product and Transaction data from parent_dfs to populate receipt items.\n\n        Args:\n            row: The current row being processed\n            col_name: The name of the column being generated\n            parent_dfs: Dictionary of previously generated dataframes (schema name as key)\n        \"\"\"\n        items = []\n        subtotal = 0.0\n\n        try:\n            # Get customer ID\n            customer_id = row.get('customer_id', None)\n\n            # Use the parent_dfs parameter which contains the generated data\n            if parent_dfs and 'Product' in parent_dfs and 'Transaction' in parent_dfs:\n                # Get Product data from parent_dfs\n                products_df = parent_dfs['Product']\n                transactions_df = parent_dfs['Transaction']\n\n            else:\n                print(\"  - Required parent dataframes not available\")\n                return []\n\n            # Filter transactions for this customer if possible\n            if customer_id and 'customer_id' in transactions_df.columns:\n                customer_transactions = transactions_df[transactions_df['customer_id'] == customer_id]\n                if len(customer_transactions) == 0:\n                    print(f\"  - No transactions found for customer ID {customer_id}, using random transactions\")\n                    # If no matching transactions, just take random ones\n                    customer_transactions = transactions_df.sample(min(5, len(transactions_df)))\n                else:\n                    print(f\"  - Found {len(customer_transactions)} transactions for customer ID {customer_id}\")\n            else:\n                print(f\"  - No customer ID or customer_id column, using random transactions\")\n                # If no customer ID or column, just take random transactions\n                customer_transactions = transactions_df.sample(min(5, len(transactions_df)))\n\n            # Process each transaction to create a receipt item\n            for _, tx in customer_transactions.iterrows():\n                # Get product information\n                if 'product_id' in tx and tx['product_id'] is not None:\n                    product_matches = products_df[products_df['id'] == tx['product_id']]\n                    if len(product_matches) &gt; 0:\n                        product = product_matches.iloc[0]\n\n                        # Extract product details\n                        product_name = product['name']\n                        sku = product['sku']\n                        unit_price = float(product['price'])\n                        quantity = int(tx['quantity'])\n\n                        # Calculate item total\n                        item_total = round(quantity * unit_price, 2)\n\n                        # Add to items list\n                        items.append({\n                            \"product_name\": product_name,\n                            \"sku\": sku,\n                            \"quantity\": quantity,\n                            \"unit_price\": unit_price,\n                            \"item_total\": item_total\n                        })\n\n                        # Update subtotal\n                        subtotal += item_total\n\n            # Update the row's subtotal\n            row[\"subtotal\"] = round(subtotal, 2)\n\n            # If no items, set subtotal to 0\n            if not items:\n                row[\"subtotal\"] = 0.0\n\n            return items\n\n        except Exception as e:\n            print(f\"Error generating receipt items: {str(e)}\")\n            return []\n\n    # Custom generators dictionary\n    custom_generators = {\n        \"Receipt\": {\n            \"items\": generate_receipt_items,\n            \"tax_amount\": calculate_tax,\n            \"total\": calculate_total\n        }\n    }\n\n    # Generate data for all schemas in a single step\n    # The __depends_on__ mechanism ensures the correct generation order\n    results = generator.generate_for_schemas(\n        schemas=schemas,\n        prompts=prompts,\n        sample_sizes=sample_sizes,\n        output_dir=OUTPUT_DIR,\n        custom_generators=custom_generators\n    )\n</code></pre>"},{"location":"examples/structured_and_unstructured_mixed/yaml_schemas/#key-features","title":"Key Features","text":"<ol> <li>Mixed Content Generation: Generate both structured data and documents in one workflow</li> <li>Template Processing: Convert structured data into formatted documents (HTML \u2192 PDF)</li> <li>Cross-Reference Consistency: Ensure generated documents reference valid structured data</li> <li>Custom Generators: Define functions that calculate values or extract data from other schemas</li> <li>Dependency Management: Define which schemas must be generated before others</li> </ol>"},{"location":"examples/structured_and_unstructured_mixed/yaml_schemas/#document-template-files","title":"Document Template Files","text":"<p>The <code>__template__</code> property in the Receipt schema references an HTML template file:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;{{store_name}} - Receipt&lt;/title&gt;\n    &lt;style&gt;\n        body {\n            font-family: 'Arial', sans-serif;\n            line-height: 1.5;\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n        }\n        .header {\n            text-align: center;\n            margin-bottom: 20px;\n            border-bottom: 2px solid #333;\n            padding-bottom: 10px;\n        }\n        .receipt-details {\n            margin-bottom: 20px;\n        }\n        .items-table {\n            width: 100%;\n            border-collapse: collapse;\n            margin-top: 20px;\n            margin-bottom: 20px;\n        }\n        .items-table th, .items-table td {\n            border-bottom: 1px solid #ddd;\n            padding: 10px;\n            text-align: left;\n        }\n        .items-table th {\n            background-color: #f5f5f5;\n        }\n        .amount-section {\n            width: 50%;\n            float: right;\n            margin-top: 10px;\n        }\n        .amount-row {\n            display: flex;\n            justify-content: space-between;\n            margin-bottom: 5px;\n        }\n        .final-total {\n            font-weight: bold;\n            font-size: 1.2em;\n            margin-top: 10px;\n            padding-top: 10px;\n            border-top: 2px solid #333;\n        }\n        .footer {\n            margin-top: 30px;\n            text-align: center;\n            font-size: 0.9em;\n            color: #666;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"header\"&gt;\n        &lt;h1&gt;{{store_name}}&lt;/h1&gt;\n        &lt;p&gt;{{store_address}}&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"receipt-details\"&gt;\n        &lt;p&gt;&lt;strong&gt;Receipt #:&lt;/strong&gt; {{id}}&lt;/p&gt;\n        &lt;p&gt;&lt;strong&gt;Date:&lt;/strong&gt; {{transaction_date}}&lt;/p&gt;\n        &lt;p&gt;&lt;strong&gt;Cashier:&lt;/strong&gt; {{cashier}}&lt;/p&gt;\n        {% if customer_id %}\n        &lt;p&gt;&lt;strong&gt;Customer ID:&lt;/strong&gt; {{customer_id}}&lt;/p&gt;\n        {% endif %}\n    &lt;/div&gt;\n\n    &lt;table class=\"items-table\"&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th&gt;Item&lt;/th&gt;\n                &lt;th&gt;SKU&lt;/th&gt;\n                &lt;th&gt;Quantity&lt;/th&gt;\n                &lt;th&gt;Unit Price&lt;/th&gt;\n                &lt;th&gt;Total&lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            {% for item in items %}\n            &lt;tr&gt;\n                &lt;td&gt;{{item.product_name}}&lt;/td&gt;\n                &lt;td&gt;{{item.sku}}&lt;/td&gt;\n                &lt;td&gt;{{item.quantity}}&lt;/td&gt;\n                &lt;td&gt;${{item.unit_price}}&lt;/td&gt;\n                &lt;td&gt;${{item.item_total}}&lt;/td&gt;\n            &lt;/tr&gt;\n            {% endfor %}\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n\n    &lt;div class=\"amount-section\"&gt;\n        &lt;div class=\"amount-row\"&gt;\n            &lt;span&gt;Subtotal:&lt;/span&gt;\n            &lt;span&gt;${{subtotal}}&lt;/span&gt;\n        &lt;/div&gt;\n        &lt;div class=\"amount-row\"&gt;\n            &lt;span&gt;Tax ({{tax_rate}}%):&lt;/span&gt;\n            &lt;span&gt;${{tax_amount}}&lt;/span&gt;\n        &lt;/div&gt;\n        {% if discount_amount &gt; 0 %}\n        &lt;div class=\"amount-row\"&gt;\n            &lt;span&gt;Discount:&lt;/span&gt;\n            &lt;span&gt;-${{discount_amount}}&lt;/span&gt;\n        &lt;/div&gt;\n        {% endif %}\n        &lt;div class=\"amount-row final-total\"&gt;\n            &lt;span&gt;Total:&lt;/span&gt;\n            &lt;span&gt;${{total}}&lt;/span&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;div style=\"clear: both;\"&gt;&lt;/div&gt;\n\n    &lt;div class=\"payment-section\"&gt;\n        &lt;p&gt;&lt;strong&gt;Payment Method:&lt;/strong&gt; {{payment_method}}&lt;/p&gt;\n        {% if notes %}\n        &lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt; {{notes}}&lt;/p&gt;\n        {% endif %}\n    &lt;/div&gt;\n\n    &lt;div class=\"footer\"&gt;\n        &lt;p&gt;Thank you for shopping at {{store_name}}!&lt;/p&gt;\n        &lt;p&gt;Please keep this receipt for your records.&lt;/p&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/structured_and_unstructured_mixed/yaml_schemas/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Define Dependencies: Use <code>__depends_on__</code> to specify which schemas must be generated first</p> </li> <li> <p>Use Custom Generators: Create custom generators for complex logic like populating document items</p> </li> <li> <p>Access Parent Data: Use the <code>parent_dfs</code> parameter in custom generators to access previously generated data</p> </li> <li> <p>Calculate Derived Values: Use simple functions for calculated fields like totals and taxes</p> </li> <li> <p>Design Clean Templates: Create well-structured templates with appropriate styling and conditional sections</p> </li> </ol>"},{"location":"examples/structured_and_unstructured_mixed/yaml_schemas/#sample-outputs","title":"Sample Outputs","text":"<p>You can view sample outputs generated using these YAML schemas and templates here:</p> <p>Example Retail YAML Outputs</p>"},{"location":"examples/structured_only/dict_schemas/","title":"Dictionary-Based Schema Examples","text":"<p>Source code: examples/structured_only/example_dict_schemas.py</p> <p>This example demonstrates how to define and use dictionary-based schemas directly in your Python code for synthetic data generation with SYDA.</p>"},{"location":"examples/structured_only/dict_schemas/#overview","title":"Overview","text":"<p>Dictionary-based schemas are the most straightforward way to define your data structure in SYDA. You define your schemas as Python dictionaries right in your code, without the need for external schema files.</p>"},{"location":"examples/structured_only/dict_schemas/#schema-definition","title":"Schema Definition","text":"<p>Dictionary schemas are defined as nested Python dictionaries where: - The top-level keys are table/schema names - Each schema contains field definitions with types and descriptions - Special keys like <code>__table_description__</code> and <code>__foreign_keys__</code> provide additional metadata</p> <p>Here's an example of a dictionary-based schema for an e-commerce system:</p> <pre><code>schemas = {\n    # Customer schema with table and column descriptions\n    'Customer': {\n        # Define schema with additional metadata\n        '__table_description__': 'Registered users of the e-commerce platform who can place orders',\n        'id': {'type': 'number', 'description': 'Unique identifier for the customer'},\n        'name': {'type': 'text', 'description': 'Full name of the customer'},\n        'email': {'type': 'email', 'description': 'Customer email address used for communication'},\n        'signup_date': {'type': 'date', 'description': 'Date when the customer registered'},\n        'loyalty_tier': {'type': 'text', 'description': 'Customer loyalty program level (Bronze, Silver, Gold, Platinum)'}\n    },\n\n    # Order schema with table and column descriptions\n    'Order': {\n        # Define schema with additional metadata\n        '__table_description__': 'Customer orders for products, including order status and total amount',\n        '__foreign_keys__': {\n            'customer_id': ['Customer', 'id']  # Order.customer_id references Customer.id\n        },\n\n        # Define columns\n        'id': {'type': 'number', 'description': 'Unique order identifier', 'primary_key': True},\n        'customer_id': {'type': 'foreign_key', 'description': 'Reference to the customer who placed the order'},\n        'order_date': {'type': 'date', 'description': 'Date when the order was placed'},\n        'status': {'type': 'text', 'description': 'Current status of the order'},\n        'total_amount': {'type': 'number', 'description': 'Total amount of the order in USD'}\n    }\n}\n</code></pre>"},{"location":"examples/structured_only/dict_schemas/#foreign-key-handling","title":"Foreign Key Handling","text":"<p>Dictionary schemas support three methods for defining foreign key relationships:</p>"},{"location":"examples/structured_only/dict_schemas/#1-using-the-__foreign_keys__-special-section-recommended","title":"1. Using the <code>__foreign_keys__</code> Special Section (Recommended)","text":"<pre><code>'Order': {\n    '__foreign_keys__': {\n        'customer_id': ['Customer', 'id']  # Order.customer_id references Customer.id\n    },\n    # field definitions...\n}\n</code></pre>"},{"location":"examples/structured_only/dict_schemas/#2-using-field-level-references","title":"2. Using Field-Level References","text":"<pre><code>'customer_id': {\n    'type': 'foreign_key',\n    'description': 'Reference to the customer who placed the order',\n    'references': {\n        'schema': 'Customer', \n        'field': 'id'\n    }\n}\n</code></pre>"},{"location":"examples/structured_only/dict_schemas/#code-example","title":"Code Example","text":"<p>Here's how to use dictionary-based schemas with the SyntheticDataGenerator:</p> <pre><code>from syda.generate import SyntheticDataGenerator\nfrom syda.schemas import ModelConfig\nimport random\n\n# Create a generator instance\nmodel_config = ModelConfig(\n    provider=\"anthropic\",\n    model_name=\"claude-3-5-haiku-20241022\",\n    temperature=0.7,\n    max_tokens=8192\n)\ngenerator = SyntheticDataGenerator(model_config=model_config)\n\n# Define output directory\noutput_dir = \"output/example_dict_schemas/ecommerce\"\n\n# Define custom prompts (optional)\nprompts = {\n    \"Customer\": \"Generate diverse customers for an e-commerce platform.\"\n               \"Include various loyalty tiers (Bronze, Silver, Gold, Platinum)\"\n               \"and realistic signup dates within the last 3 years.\",\n    \"Product\": \"Generate diverse products for an e-commerce store.\"\n              \"Include various categories (Electronics, Clothing, Home, Books, etc.)\"\n              \"with realistic prices and descriptions.\",\n    \"Order\": \"Generate realistic orders with appropriate dates and statuses\"\n            \"(Pending, Processing, Shipped, Delivered, Cancelled).\"\n            \"Total amounts should reflect typical e-commerce purchases.\"\n}\n\n# Define sample sizes\nsample_sizes = {\n    \"Customer\": 10,       # Base entities\n    \"Product\": 15,        # Product catalog\n    \"Order\": 25,          # ~2-3 orders per customer\n    \"OrderItem\": 50,      # ~2 items per order\n}\n\n# Define custom generators for specific schema fields\n# NOTE: Custom generators are OPTIONAL. The AI will generate reasonable values for most fields\n# based on field names, types, and descriptions. Custom generators give you precise control \n# for fields where you need specific distributions or formatting.\ncustom_generators = {\n    \"Customer\": {\n        # Ensure loyalty tiers match your specific business structure\n        \"loyalty_tier\": lambda row, col: random.choice([\"Bronze\", \"Silver\", \"Gold\", \"Platinum\"]),\n    },\n    \"Product\": {\n        # Create a strategic product category distribution\n        \"category\": lambda row, col: random.choice([\n            \"Electronics\", \"Clothing\", \"Home &amp; Kitchen\", \"Books\", \n            \"Beauty\", \"Sports\", \"Toys\"\n        ])\n    },\n    \"Order\": {\n        # Create a realistic distribution of order statuses\n        \"status\": lambda row, col: random.choices(\n            [\"Pending\", \"Processing\", \"Shipped\", \"Delivered\", \"Cancelled\"],\n            weights=[0.1, 0.15, 0.2, 0.5, 0.05]  # More likely to be delivered\n        )[0]\n    }\n}\n\n# Generate data\nresults = generator.generate_for_schemas(\n    schemas=schemas,\n    prompts=prompts,\n    sample_sizes=sample_sizes,\n    output_dir=output_dir,\n    custom_generators=custom_generators\n)\n</code></pre>"},{"location":"examples/structured_only/dict_schemas/#key-features","title":"Key Features","text":"<ol> <li>Inline Definition: Define your schema directly in your Python code</li> <li>Rich Metadata: Add descriptions for tables and fields</li> <li>Foreign Key Support: Define relationships between tables</li> <li>Custom Generators: Override AI generation for specific fields</li> <li>Automatic Generation Order: SYDA handles generating parent tables before child tables</li> </ol>"},{"location":"examples/structured_only/dict_schemas/#best-practices","title":"Best Practices","text":"<ol> <li>Use Descriptions: Always include detailed descriptions for your schema and fields</li> <li>Explicit Foreign Keys: Be explicit about foreign key relationships</li> <li>Custom Generators: Use custom generators for fields that need specific formats or distributions</li> </ol>"},{"location":"examples/structured_only/dict_schemas/#sample-outputs","title":"Sample Outputs","text":"<p>The generator produces pandas DataFrames for each schema, which can be further processed or saved to various formats:</p> <pre><code># Print summary\nfor schema_name, df in results.items():\n    print(f\"{schema_name}: {len(df)} records\")\n    print(df.head(2))\n</code></pre> <p>You can view sample outputs generated using these dictionary schemas here:</p> <p>Example Dictionary Schema Outputs</p>"},{"location":"examples/structured_only/json_schemas/","title":"JSON Schema Examples","text":"<p>Source code: examples/structured_only/example_json_schemas.py</p> <p>This example demonstrates how to define and use JSON-based schemas for synthetic data generation with SYDA.</p>"},{"location":"examples/structured_only/json_schemas/#overview","title":"Overview","text":"<p>JSON schemas provide a structured way to define your data models in external files. This approach is ideal for complex data structures and when you want to maintain separation between schema definitions and code logic.</p>"},{"location":"examples/structured_only/json_schemas/#schema-definition","title":"Schema Definition","text":"<p>JSON schemas use a structured format where: - Each JSON file defines one schema/table - Field definitions include types and descriptions - Special keys like <code>__table_description__</code> provide metadata - Constraints and foreign keys are explicitly defined</p> <p>Here are examples of JSON schema files for a blog system:</p>"},{"location":"examples/structured_only/json_schemas/#user-schema-userjson","title":"User Schema (user.json)","text":"<pre><code>{\n  \"__table_description__\": \"User accounts for the blog system\",\n  \"id\": {\n    \"type\": \"number\",\n    \"description\": \"Unique identifier for the user\",\n    \"constraints\": {\n      \"primary_key\": true\n    }\n  },\n  \"username\": {\n    \"type\": \"text\",\n    \"description\": \"User's login name\",\n    \"constraints\": {\n      \"unique\": true,\n      \"min_length\": 3,\n      \"max_length\": 50\n    }\n  },\n  \"email\": {\n    \"type\": \"email\",\n    \"description\": \"User's email address\",\n    \"constraints\": {\n      \"unique\": true,\n      \"max_length\": 150\n    }\n  },\n  \"full_name\": {\n    \"type\": \"text\",\n    \"description\": \"User's full name\",\n    \"constraints\": {\n      \"max_length\": 100\n    }\n  },\n  \"join_date\": {\n    \"type\": \"date\",\n    \"description\": \"Date when the user registered\"\n  },\n  \"bio\": {\n    \"type\": \"text\",\n    \"description\": \"User's biographical information\"\n  },\n  \"is_admin\": {\n    \"type\": \"boolean\",\n    \"description\": \"Whether the user has administrator privileges\"\n  }\n}\n</code></pre>"},{"location":"examples/structured_only/json_schemas/#post-schema-postjson","title":"Post Schema (post.json)","text":"<pre><code>{\n  \"__table_description__\": \"Blog posts created by users\",\n  \"id\": {\n    \"type\": \"number\",\n    \"description\": \"Unique identifier for the post\",\n    \"constraints\": {\n      \"primary_key\": true\n    }\n  },\n  \"author_id\": {\n    \"type\": \"foreign_key\",\n    \"description\": \"Reference to the user who created the post\",\n    \"references\": {\n      \"schema\": \"User\",\n      \"field\": \"id\"\n    }\n  },\n  \"title\": {\n    \"type\": \"text\",\n    \"description\": \"Title of the blog post\",\n    \"constraints\": {\n      \"unique\": true,\n      \"max_length\": 200\n    }\n  },\n  \"content\": {\n    \"type\": \"text\",\n    \"description\": \"Full content of the blog post\",\n    \"constraints\": {\n      \"max_length\": 50000\n    }\n  },\n  \"publish_date\": {\n    \"type\": \"date\",\n    \"description\": \"Date when the post was published\"\n  },\n  \"category\": {\n    \"type\": \"text\",\n    \"description\": \"Category of the blog post\",\n    \"constraints\": {\n      \"max_length\": 50\n    }\n  },\n  \"tags\": {\n    \"type\": \"text\",\n    \"description\": \"Comma-separated list of tags for the post\",\n    \"constraints\": {\n      \"max_length\": 500\n    }\n  }\n}\n</code></pre>"},{"location":"examples/structured_only/json_schemas/#comment-schema-commentjson","title":"Comment Schema (comment.json)","text":"<pre><code>{\n  \"__table_description__\": \"Comments on blog posts by users\",\n  \"__foreign_keys__\": {\n    \"post_id\": [\"Post\", \"id\"],\n    \"user_id\": [\"User\", \"id\"]\n  },\n  \"id\": {\n    \"type\": \"number\",\n    \"description\": \"Unique identifier for the comment\",\n    \"constraints\": {\n      \"primary_key\": true\n    }\n  },\n  \"post_id\": {\n    \"type\": \"foreign_key\",\n    \"description\": \"Reference to the post being commented on\",\n    \"references\": {\n      \"schema\": \"Post\",\n      \"field\": \"id\"\n    }\n  },\n  \"user_id\": {\n    \"type\": \"foreign_key\",\n    \"description\": \"Reference to the user who wrote the comment\",\n    \"references\": {\n      \"schema\": \"User\",\n      \"field\": \"id\"\n    }\n  },\n  \"content\": {\n    \"type\": \"text\",\n    \"description\": \"Content of the comment\",\n    \"constraints\": {\n      \"max_length\": 1000\n    }\n  },\n  \"created_at\": {\n    \"type\": \"date\",\n    \"description\": \"Date and time when the comment was created\"\n  },\n  \"is_approved\": {\n    \"type\": \"boolean\",\n    \"description\": \"Whether the comment has been approved by moderators\"\n  },\n  \"parent_comment_id\": {\n    \"type\": \"number\",\n    \"description\": \"Reference to the parent comment (for threaded comments), indicate 0 if it is a top-level comment or if it is a parent comment on the post\"\n  }\n}\n</code></pre>"},{"location":"examples/structured_only/json_schemas/#schema-directory-structure","title":"Schema Directory Structure","text":"<p>For a blog system, you might structure your JSON schemas as follows:</p> <pre><code>schema_files/json/\n\u251c\u2500\u2500 user.json\n\u251c\u2500\u2500 post.json\n\u2514\u2500\u2500 comment.json\n</code></pre>"},{"location":"examples/structured_only/json_schemas/#foreign-key-handling","title":"Foreign Key Handling","text":"<p>JSON schemas support three methods for defining foreign key relationships:</p>"},{"location":"examples/structured_only/json_schemas/#1-using-field-level-references-recommended-for-json","title":"1. Using Field-Level References (Recommended for JSON)","text":"<pre><code>{\n  \"user_id\": {\n    \"type\": \"foreign_key\",\n    \"description\": \"Reference to the author of the post\",\n    \"references\": {\n      \"schema\": \"User\",\n      \"field\": \"id\"\n    }\n  }\n}\n</code></pre>"},{"location":"examples/structured_only/json_schemas/#2-using-the-__foreign_keys__-special-section","title":"2. Using the <code>__foreign_keys__</code> Special Section","text":"<pre><code>{\n  \"__foreign_keys__\": {\n    \"user_id\": [\"User\", \"id\"]\n  }\n}\n</code></pre>"},{"location":"examples/structured_only/json_schemas/#code-example","title":"Code Example","text":"<p>Here's how to use JSON-based schemas with the SyntheticDataGenerator:</p> <pre><code>from syda.generate import SyntheticDataGenerator\nfrom syda.schemas import ModelConfig\nimport os\nimport random\nimport datetime\n\n# Create a generator instance\nmodel_config = ModelConfig(\n    provider=\"anthropic\",\n    model_name=\"claude-3-5-haiku-20241022\",\n    temperature=0.7,\n    max_tokens=8192\n)\ngenerator = SyntheticDataGenerator(model_config=model_config)\n\n# Define paths to schema files\nschema_dir = \"schema_files/json\"\nschemas = {\n    \"User\": os.path.join(schema_dir, \"user.json\"),\n    \"Post\": os.path.join(schema_dir, \"post.json\"),\n    \"Comment\": os.path.join(schema_dir, \"comment.json\")\n}\n\n# Define custom prompts\nprompts = {\n    \"User\": \"Generate diverse users for a blog platform...\",\n    \"Post\": \"Generate blog posts with diverse titles and categories...\",\n    \"Comment\": \"Generate diverse comments on blog posts...\"\n}\n\n# Define sample sizes\nsample_sizes = {\n    \"User\": 15,      # Base entities\n    \"Post\": 30,      # Posts by the users (~2 per user)\n    \"Comment\": 60,   # Comments on posts (~2 per post)\n}\n\n# Define custom generators for specific schema fields\n# NOTE: Custom generators are OPTIONAL. The AI will generate reasonable values for most fields\n# based on the schema definitions. Custom generators give you precise control for fields where\n# you need specific distributions or formatting that might be challenging for the AI.\ncustom_generators = {\n    \"User\": {\n        # Generate a specific distribution of admin users\n        \"is_admin\": lambda row, col: random.choices([True, False], weights=[0.2, 0.8])[0],\n    },\n    \"Post\": {\n        # Control publication dates to follow a specific timeline\n        \"publish_date\": lambda row, col: (datetime.datetime.now() - \n            datetime.timedelta(days=random.randint(0, 365*2))).strftime(\"%Y-%m-%d\"),\n        # Ensure post statuses follow business rules with specific ratios\n        \"status\": lambda row, col: random.choices(\n            [\"published\", \"draft\", \"archived\"],\n            weights=[0.7, 0.2, 0.1]\n        )[0]\n    }\n}\n\n# Generate data\nresults = generator.generate_for_schemas(\n    schemas=schemas,\n    prompts=prompts,\n    sample_sizes=sample_sizes,\n    output_dir=\"output/example_json_schemas/blog_data\",\n    custom_generators=custom_generators\n)\n</code></pre>"},{"location":"examples/structured_only/json_schemas/#key-features","title":"Key Features","text":"<ol> <li>Structured Format: JSON provides a well-defined structure for complex schemas</li> <li>External Definition: Maintain schema definitions separate from code</li> <li>Rich Constraints: Define constraints like uniqueness, min/max values</li> <li>Automatic Generation Order: SYDA handles dependency resolution between tables</li> </ol>"},{"location":"examples/structured_only/json_schemas/#best-practices","title":"Best Practices","text":"<ol> <li>Include Constraints: Use constraints to guide the AI generation process</li> <li>Explicit Foreign Keys: Always define foreign key relationships clearly</li> <li>Comprehensive Descriptions: Add detailed descriptions to help the AI generate appropriate data</li> <li>Schema Validation: Validate JSON schemas to ensure correctness</li> <li>Self-Referential Handling: When designing hierarchical data, use the appropriate foreign key pattern</li> </ol>"},{"location":"examples/structured_only/json_schemas/#sample-outputs","title":"Sample Outputs","text":"<p>You can view sample outputs generated using these JSON schemas here:</p> <p>Example JSON Schema Outputs</p>"},{"location":"examples/structured_only/sqlalchemy_models/","title":"SQLAlchemy Models","text":"<p>Source code: examples/structured_only/example_sqlalchemy_models.py</p> <p>This example demonstrates how to use SQLAlchemy models for synthetic data generation with SYDA.</p>"},{"location":"examples/structured_only/sqlalchemy_models/#overview","title":"Overview","text":"<p>SQLAlchemy is a popular ORM (Object Relational Mapper) for Python. SYDA can directly use your SQLAlchemy models to generate synthetic data that respects your database schema, including foreign key relationships and constraints.</p>"},{"location":"examples/structured_only/sqlalchemy_models/#model-definition","title":"Model Definition","text":"<p>SQLAlchemy models define your data structures using Python classes. SYDA automatically analyzes these models to understand: - Table structures and field types - Primary keys - Foreign key relationships - Column constraints - Documentation comments</p> <p>Here are examples of SQLAlchemy models for a CRM system:</p>"},{"location":"examples/structured_only/sqlalchemy_models/#customer-model","title":"Customer Model","text":"<pre><code>class Customer(Base):\n    \"\"\"Organization or individual client in the CRM system.\n    Represents a business entity that can place orders and have contacts.\n    \"\"\"\n    __tablename__ = 'customers'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String(100), nullable=False, unique=True, \n                 comment=\"Customer organization name\")\n    industry = Column(String(50), comment=\"Customer's primary industry\")\n    website = Column(String(100), comment=\"Customer's website URL\")\n    status = Column(String(20), comment=\"Active, Inactive, Prospect\")\n    created_at = Column(Date, default=datetime.date.today,\n                       comment=\"Date when customer was added to CRM\")\n\n    # Relationships\n    contacts = relationship(\"Contact\", back_populates=\"customer\")\n    orders = relationship(\"Order\", back_populates=\"customer\")\n</code></pre>"},{"location":"examples/structured_only/sqlalchemy_models/#contact-model","title":"Contact Model","text":"<pre><code>class Contact(Base):\n    \"\"\"Individual person associated with a customer organization.\n    Contacts are the individuals we communicate with at the customer.\n    \"\"\"\n    __tablename__ = 'contacts'\n\n    id = Column(Integer, primary_key=True)\n    customer_id = Column(Integer, ForeignKey('customers.id'), nullable=False,\n                        comment=\"Customer this contact belongs to\")\n    first_name = Column(String(50), nullable=False, \n                       comment=\"Contact's first name\")\n    last_name = Column(String(50), nullable=False, \n                      comment=\"Contact's last name\")\n    email = Column(String(100), nullable=False, unique=True, \n                  comment=\"Contact's email address\")\n    phone = Column(String(20), comment=\"Contact's phone number\")\n    position = Column(String(100), comment=\"Job title or position\")\n    is_primary = Column(Boolean, default=False, \n                       comment=\"Whether this is the primary contact\")\n\n    # Relationships\n    customer = relationship(\"Customer\", back_populates=\"contacts\")\n</code></pre>"},{"location":"examples/structured_only/sqlalchemy_models/#product-model","title":"Product Model","text":"<pre><code>class Product(Base):\n    \"\"\"Product or service offered by the company.\n    Products can be ordered by customers.\n    \"\"\"\n    __tablename__ = 'products'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String(100), nullable=False, unique=True,\n                 comment=\"Product name\")\n    category = Column(String(50), comment=\"Product category\")\n    price = Column(Float, nullable=False, comment=\"Product price in USD\")\n    description = Column(Text, comment=\"Detailed product description\")\n\n    # Relationships\n    order_items = relationship(\"OrderItem\", back_populates=\"product\")\n</code></pre>"},{"location":"examples/structured_only/sqlalchemy_models/#order-model","title":"Order Model","text":"<pre><code>class Order(Base):\n    \"\"\"Customer order for products or services.\n    Orders contain order items for specific products.\n    \"\"\"\n    __tablename__ = 'orders'\n\n    id = Column(Integer, primary_key=True)\n    customer_id = Column(Integer, ForeignKey('customers.id'), nullable=False,\n                        comment=\"Customer who placed the order\")\n    order_date = Column(Date, nullable=False, \n                       comment=\"Date when order was placed\")\n    status = Column(String(20), comment=\"New, Processing, Shipped, Delivered, Cancelled\")\n    total_amount = Column(Float, comment=\"Total order amount in USD\")\n\n    # Relationships\n    customer = relationship(\"Customer\", back_populates=\"orders\")\n    items = relationship(\"OrderItem\", back_populates=\"order\")\n</code></pre>"},{"location":"examples/structured_only/sqlalchemy_models/#orderitem-model","title":"OrderItem Model","text":"<pre><code>class OrderItem(Base):\n    \"\"\"Individual item within an order.\n    Each order item represents a specific product in a specific quantity.\n    \"\"\"\n    __tablename__ = 'order_items'\n\n    id = Column(Integer, primary_key=True)\n    order_id = Column(Integer, ForeignKey('orders.id'), nullable=False,\n                     comment=\"Order this item belongs to\")\n    product_id = Column(Integer, ForeignKey('products.id'), nullable=False,\n                       comment=\"Product being ordered\")\n    quantity = Column(Integer, nullable=False, \n                     comment=\"Quantity of product ordered\")\n    unit_price = Column(Float, nullable=False, \n                       comment=\"Price per unit at time of order\")\n\n    # Relationships\n    order = relationship(\"Order\", back_populates=\"items\")\n    product = relationship(\"Product\", back_populates=\"order_items\")\n</code></pre>"},{"location":"examples/structured_only/sqlalchemy_models/#foreign-key-handling","title":"Foreign Key Handling","text":"<p>SQLAlchemy models define foreign keys explicitly through ForeignKey column definitions, which SYDA uses for detection:</p> <pre><code>customer_id = Column(Integer, ForeignKey('customers.id'), nullable=False)\n</code></pre> <p>SYDA automatically analyzes these foreign key definitions to: - Determine the correct generation order (parent tables first) - Ensure referential integrity in the generated data - Handle one-to-many and many-to-one relationships</p> <p>Note: While SQLAlchemy models also define relationships using the <code>relationship()</code> function, SYDA specifically looks for the explicit <code>ForeignKey()</code> definitions to detect dependencies between tables.</p>"},{"location":"examples/structured_only/sqlalchemy_models/#code-example","title":"Code Example","text":"<p>Here's how to use SQLAlchemy models with the SyntheticDataGenerator:</p> <pre><code>from syda.generate import SyntheticDataGenerator\nfrom syda.schemas import ModelConfig\nimport os\nimport random\nimport datetime\nfrom sqlalchemy import Column, Integer, String, ForeignKey, Float, Date, Boolean, Text\nfrom sqlalchemy.orm import declarative_base, relationship\n\n# Create a Base for our models\nBase = declarative_base()\n\n# Define SQLAlchemy models (Customer, Contact, Product, etc.)\n# ... model definitions as shown above ...\n\n# Create a generator instance\nmodel_config = ModelConfig(\n    provider=\"anthropic\",\n    model_name=\"claude-3-5-haiku-20241022\",\n    temperature=0.7,\n    max_tokens=4000,\n)\ngenerator = SyntheticDataGenerator(model_config=model_config)\n\n# Define output directory\noutput_dir = \"output/example_sqlalchemy_models/crm_data\"\n\n# Define custom prompts\nprompts = {\n    \"customers\": \"\"\"\n    Generate diverse customer organizations for a B2B SaaS company.\n    Include a mix of industries like technology, healthcare, finance, etc.\n    \"\"\",\n\n    \"products\": \"\"\"\n    Generate products for a cloud software company.\n    Products should include various software services, support packages, and consulting.\n    \"\"\",\n\n    \"orders\": \"\"\"\n    Generate realistic orders with appropriate dates and statuses.\n    \"\"\",\n}\n\n# Define sample sizes\nsample_sizes = {\n    \"customers\": 10,        # Base entities\n    \"contacts\": 25,         # ~2-3 contacts per customer\n    \"products\": 15,         # Products catalog\n    \"orders\": 30,           # ~3 orders per customer\n    \"order_items\": 60,       # ~2 items per order\n}\n\n# Define custom generators for specific model columns\n# NOTE: Custom generators are OPTIONAL. The AI will generate reasonable values for most fields\n# based on column names, SQLAlchemy comments, and field types.\ncustom_generators = {\n    \"customers\": {\n        # Ensure a specific distribution of customer statuses for business reporting\n        \"status\": lambda row, col: random.choice([\"Active\", \"Inactive\", \"Prospect\"]),\n    },\n    \"products\": {\n        # Control price ranges more precisely than the AI might\n        \"price\": lambda row, col: round(random.uniform(50, 5000), 2),\n        # Ensure product categories match your specific business domains\n        \"category\": lambda row, col: random.choice([\n            \"Cloud Infrastructure\", \"Business Intelligence\", \"Security Services\",\n            \"Data Analytics\", \"Custom Development\", \"Support Package\", \"API Services\"\n        ])\n    },\n    \"order_items\": {\n        # Example of a simple numeric distribution\n        \"quantity\": lambda row, col: random.randint(1, 10),\n    },\n}\n\n# Generate data for all SQLAlchemy models with automatic dependency resolution\nresults = generator.generate_for_sqlalchemy_models(\n    sqlalchemy_models=[Customer, Contact, Product, Order, OrderItem],\n    prompts=prompts,\n    sample_sizes=sample_sizes,\n    output_dir=output_dir,\n    custom_generators=custom_generators\n)\n</code></pre>"},{"location":"examples/structured_only/sqlalchemy_models/#key-features","title":"Key Features","text":"<ol> <li>Native ORM Integration: Works directly with your SQLAlchemy models</li> <li>Automatic Relationship Detection: Analyzes foreign keys and relationships</li> <li>Comment-Based Guidance: Uses SQLAlchemy column comments for better AI prompting</li> <li>Type Awareness: Respects column types and constraints</li> <li>Dependency Resolution: Handles the correct order for generating related data</li> </ol>"},{"location":"examples/structured_only/sqlalchemy_models/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Add Comments: Use SQLAlchemy comments to guide data generation    <pre><code>name = Column(String(100), comment=\"Customer organization name\")\n</code></pre></p> </li> <li> <p>Define Relationships: Always define proper relationships between models    <pre><code>contacts = relationship(\"Contact\", back_populates=\"customer\")\n</code></pre></p> </li> <li> <p>Use Constraints: Add constraints like nullable=False and unique=True    <pre><code>email = Column(String(100), nullable=False, unique=True)\n</code></pre></p> </li> <li> <p>Custom Generators: Use custom generators for fields needing specific distributions    <pre><code>\"status\": lambda row, col: random.choice([\"Active\", \"Inactive\", \"Prospect\"])\n</code></pre></p> </li> <li> <p>Model Documentation: Add docstrings to describe your models    <pre><code>\"\"\"Organization or individual client in the CRM system.\"\"\"\n</code></pre></p> </li> </ol>"},{"location":"examples/structured_only/sqlalchemy_models/#sample-outputs","title":"Sample Outputs","text":"<p>You can view sample outputs generated using these SQLAlchemy models here:</p> <p>Example SQLAlchemy Model Outputs</p>"},{"location":"examples/structured_only/yaml_schemas/","title":"YAML Schema Examples","text":"<p>Source code: examples/structured_only/example_yaml_schemas.py</p> <p>This example demonstrates how to define and use YAML-based schemas for synthetic data generation with SYDA.</p>"},{"location":"examples/structured_only/yaml_schemas/#overview","title":"Overview","text":"<p>YAML schemas provide a clean, readable way to define your data structures in external files. This approach separates your schema definitions from your code, making it easier to manage complex data models.</p>"},{"location":"examples/structured_only/yaml_schemas/#schema-definition","title":"Schema Definition","text":"<p>YAML schemas use a hierarchical structure where: - Each YAML file defines one schema/table - Field definitions include types and descriptions - Special keys like <code>__table_description__</code> provide metadata - Foreign keys can be defined using multiple methods</p> <p>Here are examples of YAML schema files for an inventory management system:</p>"},{"location":"examples/structured_only/yaml_schemas/#supplier-schema-supplieryml","title":"Supplier Schema (supplier.yml)","text":"<pre><code>__table_description__: Suppliers who provide products to the inventory system\n\nid:\n  type: number\n  description: Unique identifier for the supplier\n  constraints:\n    primary_key: true\n\ncompany_name:\n  type: text\n  description: Name of the supplier company\n  constraints:\n    unique: true\n    max_length: 200\n\ncontact_name:\n  type: text\n  description: Name of the primary contact person at the supplier\n  constraints:\n    max_length: 100\n\nemail:\n  type: email\n  description: Email address for the supplier\n  constraints:\n    unique: true\n    max_length: 150\n\nphone:\n  type: text\n  description: Phone number for the supplier\n  constraints:\n    max_length: 30\n\naddress:\n  type: text\n  description: Physical address of the supplier\n  constraints:\n    max_length: 300\n\nwebsite:\n  type: text\n  description: Supplier's website URL\n  constraints:\n    max_length: 200\n\npayment_terms:\n  type: text\n  description: Payment terms for this supplier (e.g., Net 30, Net 60)\n</code></pre>"},{"location":"examples/structured_only/yaml_schemas/#category-schema-categoryyml","title":"Category Schema (category.yml)","text":"<pre><code>__table_description__: Product categories in the inventory system\n\nid:\n  type: number\n  description: Unique identifier for the category\n  constraints:\n    primary_key: true\n\nname:\n  type: text\n  description: Name of the category\n  constraints:\n    unique: true\n    max_length: 100\n\ndescription:\n  type: text\n  description: Description of the category and what types of products it contains\n  constraints:\n    max_length: 1000\n\nparent_id:\n  type: number\n  description: Reference to the parent category (for hierarchical categories), indicate 0 if it is a parent category\n</code></pre>"},{"location":"examples/structured_only/yaml_schemas/#product-schema-productyml","title":"Product Schema (product.yml)","text":"<pre><code>__table_description__: Products in the inventory management system\n\nid:\n  type: number\n  description: Unique identifier for the product\n  constraints:\n    primary_key: true\n\nname:\n  type: text\n  description: Name of the product\n  constraints:\n    unique: true\n    max_length: 150\n\ncategory_id:\n  type: foreign_key\n  description: Reference to the product category\n  references:\n    schema: Category\n    field: id\n\nsku:\n  type: text\n  description: Stock Keeping Unit - unique product identifier\n  constraints:\n    unique: true\n    max_length: 50\n\nprice:\n  type: number\n  description: Current price of the product in USD\n</code></pre>"},{"location":"examples/structured_only/yaml_schemas/#schema-directory-structure","title":"Schema Directory Structure","text":"<p>For an inventory management system, you might structure your YAML schemas as follows:</p> <pre><code>schema_files/yaml/\n\u251c\u2500\u2500 supplier.yml\n\u251c\u2500\u2500 category.yml\n\u251c\u2500\u2500 product.yml\n\u2514\u2500\u2500 inventory.yml\n</code></pre>"},{"location":"examples/structured_only/yaml_schemas/#foreign-key-handling","title":"Foreign Key Handling","text":"<p>YAML schemas support three methods for defining foreign key relationships:</p>"},{"location":"examples/structured_only/yaml_schemas/#1-using-field-level-references-recommended-for-yaml","title":"1. Using Field-Level References (Recommended for YAML)","text":"<pre><code>category_id:\n  type: foreign_key\n  description: Reference to the product category\n  references:\n    schema: Category\n    field: id\n</code></pre>"},{"location":"examples/structured_only/yaml_schemas/#2-using-the-__foreign_keys__-special-section","title":"2. Using the <code>__foreign_keys__</code> Special Section","text":"<pre><code>__foreign_keys__:\n  category_id: [Category, id]  # product.category_id references category.id\n</code></pre>"},{"location":"examples/structured_only/yaml_schemas/#code-example","title":"Code Example","text":"<p>Here's how to use YAML-based schemas with the SyntheticDataGenerator:</p> <pre><code>from syda.generate import SyntheticDataGenerator\nfrom syda.schemas import ModelConfig\nimport os\nimport random\nimport datetime\n\n# Create a generator instance\nmodel_config = ModelConfig(\n    provider=\"anthropic\",\n    model_name=\"claude-3-5-haiku-20241022\",\n    temperature=0.7,\n    max_tokens=8192\n)\ngenerator = SyntheticDataGenerator(model_config=model_config)\n\n# Define paths to schema files\nschema_dir = \"schema_files/yaml\"\nschemas = {\n    \"Supplier\": os.path.join(schema_dir, \"supplier.yml\"),\n    \"Category\": os.path.join(schema_dir, \"category.yml\"),\n    \"Product\": os.path.join(schema_dir, \"product.yml\"),\n    \"Inventory\": os.path.join(schema_dir, \"inventory.yml\")\n}\n\n# Define custom prompts\nprompts = {\n    \"Supplier\": \"\"\"Generate diverse suppliers for an inventory system.\n        Include international suppliers with varied payment terms.\n        Create a mix of large established vendors and smaller specialty suppliers.\"\"\",\n\n    \"Category\": \"\"\"Generate product categories for an inventory system.\n        Include both parent categories and subcategories.\n        Use realistic department store or e-commerce categories.\"\"\",\n\n    \"Product\": \"\"\"Generate diverse products across different categories.\n        Include realistic prices, SKUs, and descriptions.\n        Generate both popular and niche products.\"\"\",\n\n    \"Inventory\": \"\"\"Generate inventory records for products in a warehouse.\n        Include varying quantities, locations, and last check dates.\n        Create realistic batch numbers and some expiry dates.\"\"\"\n}\n\n# Define sample sizes\nsample_sizes = {\n    \"Supplier\": 10,      # Base entities\n    \"Category\": 12,      # Categories for products\n    \"Product\": 25,       # Products across categories from suppliers\n    \"Inventory\": 35,     # Inventory records for products (some products have multiple records)\n}\n\n# Define custom generators for specific schema fields\n# NOTE: Custom generators are OPTIONAL. The AI will generate reasonable values for most fields\n# using the schema descriptions. Custom generators give you precise control for fields where\n# you need specific distributions or formatting.\ndef supplier_active_generator(row, col):\n    return random.choices([True, False], weights=[0.8, 0.2])[0]\n\ndef supplier_payment_terms_generator(row, col):\n    return random.choice([\"Net 30\", \"Net 60\", \"Net 15\", \"COD\", \"Prepaid\"])\n\ndef product_price_generator(row, col):\n    return round(random.uniform(5.99, 499.99), 2)\n\ndef inventory_last_checked_generator(row, col):\n    return (datetime.datetime.now() - datetime.timedelta(days=random.randint(1, 90))).strftime(\"%Y-%m-%d\")\n\ncustom_generators = {\n    \"Supplier\": {\n        # Generate a specific distribution of active/inactive suppliers\n        \"active\": supplier_active_generator,\n        # Generate values from a fixed set of options\n        \"payment_terms\": supplier_payment_terms_generator\n    },\n    \"Product\": {\n        # Control numeric value distributions\n        \"price\": product_price_generator\n    },\n    \"Inventory\": {\n        # Control date field with specific distribution\n        \"last_checked\": inventory_last_checked_generator\n    }\n}\n\n# Generate data\nresults = generator.generate_for_schemas(\n    schemas=schemas,\n    prompts=prompts,\n    sample_sizes=sample_sizes,\n    output_dir=\"output/example_yaml_schemas/inventory_data\",\n    custom_generators=custom_generators\n)\n</code></pre>"},{"location":"examples/structured_only/yaml_schemas/#key-features","title":"Key Features","text":"<ol> <li>External Files: Maintain schema definitions separate from code</li> <li>Readability: YAML's syntax is clean and human-readable</li> <li>Schema Evolution: Easily update schema files without changing code</li> <li>Rich Constraints: Define constraints like uniqueness, min/max values</li> <li>Automatic Generation Order: SYDA handles dependency resolution</li> </ol>"},{"location":"examples/structured_only/yaml_schemas/#best-practices","title":"Best Practices","text":"<ol> <li>Organize by Domain: Group related schemas in directories</li> <li>Include Descriptions: Always add descriptions for fields and tables</li> <li>Version Control: Track schema changes with your source control system</li> <li>Explicit Foreign Keys: Clearly define relationships between tables</li> </ol>"},{"location":"examples/structured_only/yaml_schemas/#sample-outputs","title":"Sample Outputs","text":"<p>The generator produces pandas DataFrames for each schema, which can be further processed or saved to various formats:</p> <pre><code># Print summary\nfor schema_name, df in results.items():\n    print(f\"{schema_name}: {len(df)} records\")\n    print(df.head(2))\n</code></pre> <p>You can view sample outputs generated using these YAML schemas here:</p> <p>Example YAML Schema Outputs</p>"},{"location":"schema_reference/field_types/","title":"SYDA Schema Reference","text":"<p>This document defines the schema format for the SYDA (Synthetic Data) library. It describes the supported field types and constraints.</p>"},{"location":"schema_reference/field_types/#basic-schema-structure","title":"Basic Schema Structure","text":"<p>A schema in SYDA is defined as a JSON or YAML object with field names as keys and field types as values. The simplest form is:</p> <pre><code>field1:\n  type: string\nfield2:\n  type: number\nfield3:\n  type: date\n</code></pre>"},{"location":"schema_reference/field_types/#field-types","title":"Field Types","text":"<p>The following field types are supported:</p>"},{"location":"schema_reference/field_types/#text","title":"text","text":"<p>Generic text field for storing names, descriptions, and other textual content.</p> <p>Example: <pre><code>name:\n  type: text\n</code></pre></p>"},{"location":"schema_reference/field_types/#string","title":"string","text":"<p>Same as text, used for storing character data.</p> <p>Example: <pre><code>title:\n  type: string\n</code></pre></p>"},{"location":"schema_reference/field_types/#number","title":"number","text":"<p>Numeric field that can represent integers or decimal values.</p> <p>Example: <pre><code>id:\n  type: number\n</code></pre></p>"},{"location":"schema_reference/field_types/#integer","title":"integer","text":"<p>Integer value with no decimal places. Can also use the alias <code>int</code>.</p> <p>Example: <pre><code>age:\n  type: integer\n</code></pre></p>"},{"location":"schema_reference/field_types/#float","title":"float","text":"<p>Floating-point number that can have decimal places.</p> <p>Example: <pre><code>price:\n  type: float\n</code></pre></p>"},{"location":"schema_reference/field_types/#date","title":"date","text":"<p>Date value in standard format.</p> <p>Example: <pre><code>birth_date:\n  type: date\n</code></pre></p>"},{"location":"schema_reference/field_types/#datetime","title":"datetime","text":"<p>Date and time value.</p> <p>Example: <pre><code>created_at:\n  type: datetime\n</code></pre></p>"},{"location":"schema_reference/field_types/#boolean","title":"boolean","text":"<p>True/false value. Can also use the alias <code>bool</code>.</p> <p>Example: <pre><code>is_active:\n  type: boolean\n</code></pre></p>"},{"location":"schema_reference/field_types/#email","title":"email","text":"<p>Email address with appropriate validation.</p> <p>Example: <pre><code>contact:\n  type: email\n</code></pre></p>"},{"location":"schema_reference/field_types/#phone","title":"phone","text":"<p>Phone number field.</p> <p>Example: <pre><code>telephone:\n  type: phone\n</code></pre></p>"},{"location":"schema_reference/field_types/#address","title":"address","text":"<p>Physical address field.</p> <p>Example: <pre><code>location:\n  type: address\n</code></pre></p>"},{"location":"schema_reference/field_types/#url","title":"url","text":"<p>URL/website address.</p> <p>Example: <pre><code>website:\n  type: url\n</code></pre></p>"},{"location":"schema_reference/field_types/#array","title":"array","text":"<p>List of items. Arrays are typically populated using custom generators in the application code.</p> <p>Example: <pre><code>items:\n  type: array\n</code></pre></p>"},{"location":"schema_reference/field_types/#foreign_key","title":"foreign_key","text":"<p>Reference to another table in the database.</p> <p>Example: <pre><code>user_id:\n  type: foreign_key\n</code></pre></p>"},{"location":"schema_reference/field_types/#supported-field-properties","title":"Supported Field Properties","text":"<p>Fields can be defined with additional properties by using an object instead of a string:</p> <p><pre><code>name:\n  type: text\n  description: Full name of the person\n  constraints:\n    max_length: 50\n</code></pre> The following properties can be used when defining fields:</p>"},{"location":"schema_reference/field_types/#description","title":"description","text":"<p>Human-readable description of the field's purpose.</p> <p>Example: <pre><code>email:\n  type: email\n  description: \"User's email address for notifications\"\n</code></pre></p>"},{"location":"schema_reference/field_types/#length","title":"length","text":"<p>Fixed length for the field.</p> <p>Example: <pre><code>zip_code:\n  type: string\n  length: 10\n</code></pre></p>"},{"location":"schema_reference/field_types/#min_length","title":"min_length","text":"<p>Minimum length for string fields.</p> <p>Example: <pre><code>password:\n  type: string\n  min_length: 8\n</code></pre></p>"},{"location":"schema_reference/field_types/#max_length","title":"max_length","text":"<p>Maximum length for string fields.</p> <p>Example: <pre><code>bio:\n  type: text\n  max_length: 250\n</code></pre></p>"},{"location":"schema_reference/field_types/#min","title":"min","text":"<p>Minimum value for numeric fields.</p> <p>Example: <pre><code>min: 0\n</code></pre></p>"},{"location":"schema_reference/field_types/#max","title":"max","text":"<p>Maximum value for numeric fields.</p> <p>Example: <pre><code>max: 1000\n</code></pre></p>"},{"location":"schema_reference/field_types/#decimals","title":"decimals","text":"<p>Number of decimal places for float fields.</p> <p>Example: <pre><code>price:\n  type: float\n  decimals: 2\n</code></pre></p>"},{"location":"schema_reference/field_types/#format","title":"format","text":"<p>Format string specification (for dates, etc.).</p> <p>Example: <pre><code>creation_date:\n  type: date\n  format: \"YYYY-MM-DD\"\n</code></pre></p>"},{"location":"schema_reference/field_types/#enum","title":"enum","text":"<p>List of possible values for the field.</p> <p>Example: <pre><code>status:\n  type: string\n  enum: [\"active\", \"inactive\", \"pending\"]\n</code></pre></p>"},{"location":"schema_reference/field_types/#pattern","title":"pattern","text":"<p>Regular expression pattern for validation.</p> <p>Example: <pre><code>pattern: \"^[A-Z][a-z]+$\"\n</code></pre></p>"},{"location":"schema_reference/field_types/#references","title":"references","text":"<p>Foreign key reference to another table and field.</p> <p>Example: <pre><code>user_id:\n  type: foreign_key\n  references: {\"schema\": \"User\", \"field\": \"id\"}\n</code></pre></p> <p>Note: Field properties are validated during schema validation. For example, using an invalid field type will cause validation to fail with a detailed error message.</p>"},{"location":"schema_reference/field_types/#field-constraints","title":"Field Constraints","text":"<p>Constraints can be specified directly in the field definition or in a separate <code>constraints</code> object:</p> <pre><code>email:\n  type: email\n  constraints:\n    unique: true\n    not_null: true\n</code></pre> <p>The following constraints are supported:</p>"},{"location":"schema_reference/field_types/#not_null","title":"not_null","text":"<p>Field cannot be null or empty.</p> <p>Example: <pre><code>username:\n  type: string\n  constraints:\n    not_null: true\n</code></pre></p>"},{"location":"schema_reference/field_types/#unique","title":"unique","text":"<p>Values must be unique within the dataset.</p> <p>Example: <pre><code>email:\n  type: email\n  constraints:\n    unique: true\n</code></pre></p>"},{"location":"schema_reference/field_types/#primary_key","title":"primary_key","text":"<p>Field is a primary key for the table.</p> <p>Example: <pre><code>id:\n  type: integer\n  constraints:\n    primary_key: true\n</code></pre></p>"},{"location":"schema_reference/field_types/#format_1","title":"format","text":"<p>Format specification for specialized field types.</p> <p>Example: <pre><code>contact:\n  type: string\n  constraints:\n    format: \"email\"\n</code></pre></p>"},{"location":"schema_reference/field_types/#pattern_1","title":"pattern","text":"<p>Regular expression pattern for validation.</p> <p>Example: <pre><code>pattern: \"^[A-Z][a-z]+$\"\n</code></pre></p>"},{"location":"schema_reference/field_types/#min_1","title":"min","text":"<p>Minimum value for numeric fields.</p> <p>Example: <pre><code>min: 0\n</code></pre></p>"},{"location":"schema_reference/field_types/#max_1","title":"max","text":"<p>Maximum value for numeric fields.</p> <p>Example: <pre><code>max: 1000\n</code></pre></p>"},{"location":"schema_reference/field_types/#min_length_1","title":"min_length","text":"<p>Minimum string length for text fields.</p> <p>Example: <pre><code>password:\n  type: string\n  constraints:\n    min_length: 8\n</code></pre></p>"},{"location":"schema_reference/field_types/#max_length_1","title":"max_length","text":"<p>Maximum string length for text fields.</p> <p>Example: <pre><code>description:\n  type: text\n  constraints:\n    max_length: 500\n</code></pre></p>"},{"location":"schema_reference/field_types/#length_1","title":"length","text":"<p>Exact string length for text fields.</p> <p>Example: <pre><code>country_code:\n  type: string\n  constraints:\n    length: 2\n</code></pre></p>"},{"location":"schema_reference/foreign_keys/","title":"Multiple Ways to Define Foreign Keys","text":"<p>Foreign keys can be defined in 2 ways:</p> <ol> <li> <p>Using the <code>__foreign_keys__</code> special section (recommended):    <pre><code>__foreign_keys__:\n  user_id: [User, id]\nuser_id: foreign_key\n</code></pre></p> </li> <li> <p>Using the field definition with <code>references</code>:    <pre><code>user_id:\n  type: foreign_key\n  references:\n    schema: User\n    field: id\n</code></pre></p> </li> </ol>"},{"location":"schema_reference/special_field_types/","title":"Special Field Types","text":"<p>Special field types are prefixed with double underscores. These special sections are validated during schema validation:</p>"},{"location":"schema_reference/special_field_types/#__description__","title":"<code>__description__</code>","text":"<p>It is used to identify the table description for the schema.</p> <pre><code>__description__: Customer information for e-commerce site\n</code></pre>"},{"location":"schema_reference/special_field_types/#__table_description__","title":"<code>__table_description__</code>","text":"<p>It can also be used to identify the table description for the schema.</p> <pre><code>__table_description__: Customer information for e-commerce site\n</code></pre>"},{"location":"schema_reference/special_field_types/#__foreign_keys__","title":"<code>__foreign_keys__</code>","text":"<p>Defines foreign key relationships:</p> <pre><code>__foreign_keys__:\n  user_id: [User, id]\n  product_id: [Product, id]\n</code></pre>"},{"location":"schema_reference/special_field_types/#__depends_on__","title":"<code>__depends_on__</code>","text":"<p>Specifies schema dependencies for generation order:</p> <pre><code>__depends_on__: [Product, Customer]\n</code></pre> <p>This ensures that Product and Customer data are generated before the current schema.</p>"},{"location":"schema_reference/special_field_types/#special-template-related-fields","title":"Special Template-Related Fields","text":"<p>For schemas that generate unstructured document outputs:</p>"},{"location":"schema_reference/special_field_types/#__template__","title":"<code>__template__</code>","text":"<p>It can be set to <code>true</code> or a string value to enable template generation.</p> <pre><code>__template__: true\n</code></pre>"},{"location":"schema_reference/special_field_types/#__template_source__","title":"<code>__template_source__</code>","text":"<p>It is used to specify the path to the template file.</p> <pre><code>__template_source__: /path/to/template.html\n</code></pre>"},{"location":"schema_reference/special_field_types/#__input_file_type__","title":"<code>__input_file_type__</code>","text":"<p>It is used to specify the input file type.</p> <pre><code>__input_file_type__: html\n</code></pre>"},{"location":"schema_reference/special_field_types/#__output_file_type__","title":"<code>__output_file_type__</code>","text":"<p>It is used to specify the output file type.</p> <pre><code>__output_file_type__: pdf\n</code></pre> <p>These fields enable document generation from templates with the synthetic data.</p> <p>Important: When <code>__template__</code> is set to <code>true</code>, the <code>__template_source__</code> field is required. Schema validation will fail if this relationship is not maintained.</p>"}]}